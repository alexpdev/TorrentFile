{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TorrentFile \ud83c\udf10 Overview A simple and convenient tool for creating, reviewing, editing, and/or validating bittorrent meta files (aka torrent files). torrentfile supports all versions of Bittorrent files, including hybrid meta files, and has full unicode support. A GUI frontend for this project can be found at https://github.com/alexpdev/TorrentfileQt \ud83d\udd0c Requirements Python 3.7+ Tested on Linux, Windows and Mac \ud83d\udcbb Install via PyPi: pip install torrentfile via Git: git clone https://github.com/alexpdev/torrentfile.git cd torrentfile pip install . Download pre-compiled binaries from the release page . \ud83d\udcda Documentation Documentation can be found here or in the docs directory. torrentfile is under active development, and is subject to significant changes in the codebase between releases. \ud83d\ude80 Usage Usage ===== torrentfile [-h] [-i] [-V] [-v] create, edit, magnet, recheck, rebuild ... Command line tools for creating, editing, checking and interacting with Bittorrent metainfo files Options ------- -h, --help show this help message and exit -i, --interactive select program options interactively -V, --version show program version and exit -v, --verbose output debug information Actions ------- create, edit, magnet, recheck, rebuild create (c, new) Generate a new torrent meta file. edit (e) Edit existing torrent meta file. magnet (m) Generate magnet url from an existing Bittorrent meta file. recheck (r, check) Calculate amount of torrent meta file's content is found on disk. info (i) Show detailed information about a torrent file. rebuild (build, b) Re-assemble files obtained from a bittorrent file into the appropriate file structure for re-seeding. Read documentation for more information, or use cases. Usage examples can be found in the project documentation on the examples page. \ud83d\udcdd License Distributed under Apache v2 software license. See LICENSE for more information. \ud83d\udca1 Issues & Requests & PRs If you encounter any bugs or would like to request a new feature please open a new issue. PRs and other contributions are welcome https://github.com/alexpdev/torrentfile/issues Creating Torrents Basic torrent file createion > torrentfile create /path/to/content The -t --tracker -a --announce flags add one or more urls to list of trackers. > torrentfile create /path/to/content --tracker http://tracker1.com > torrentfile create -t http://tracker2 http://tracker3 --private /path/to/content > torrentfile create --tracker http://tracker /path/to/content > torrentfile create -t http://tracker1 http://tracker2 /path/to/content the --private flag indicates use by a private tracker the --source flag can be used to help with cross-seeding > torrentfile create --private --source EXAMPLE --tracker https://url1 https://url2 The options for controlling the progress bar using --prog or --progress : 0 : show no progress bar at all 1 : show progress bar (default) > torrentfile create -t http://tracker.com --progress 2 /path/to/content > torrentfile create --prog 0 /path/to/content to specify the save location use the -o or --out flags if the path points to directory the name of torrent is autofilled. > torrentfile create -o /specific/path/name.torrent ./content to create files using bittorrent v2 use --meta-version 2 likewise --meta-version 3 creates a hybrid torrent file. > torrentfile create --meta-version 2 /path/to/content > torrentfile create --meta-version 3 /path/to/content Check/Recheck Torrent recheck torrent file /path/to/some.torrent with /path/to/content > torrentfile recheck /path/to/some.torrent /path/to/content Edit Torrent edit a torrent file > torrentfile edit [options] <path> Create Magnet To create a magnet URI for a pre-existing torrent meta file, use the sub-command magnet or m with the path to the torrent file. > torrentfile magnet /path/to/some.torrent Interactive Mode (expiremental) Alternatively to supplying a bunch of command line arguments, interactive mode allows users to specify program options one at a time from a series of prompts. to activate interactive mode use -i or --interactive flag > torrentfile -i GUI If you prefer a windowed gui please check out the official GUI frontend here","title":"Home"},{"location":"#torrentfile","text":"","title":"TorrentFile"},{"location":"#overview","text":"A simple and convenient tool for creating, reviewing, editing, and/or validating bittorrent meta files (aka torrent files). torrentfile supports all versions of Bittorrent files, including hybrid meta files, and has full unicode support. A GUI frontend for this project can be found at https://github.com/alexpdev/TorrentfileQt","title":"\ud83c\udf10 Overview"},{"location":"#requirements","text":"Python 3.7+ Tested on Linux, Windows and Mac","title":"\ud83d\udd0c Requirements"},{"location":"#install","text":"via PyPi: pip install torrentfile via Git: git clone https://github.com/alexpdev/torrentfile.git cd torrentfile pip install . Download pre-compiled binaries from the release page .","title":"\ud83d\udcbb Install"},{"location":"#documentation","text":"Documentation can be found here or in the docs directory. torrentfile is under active development, and is subject to significant changes in the codebase between releases.","title":"\ud83d\udcda Documentation"},{"location":"#usage","text":"Usage ===== torrentfile [-h] [-i] [-V] [-v] create, edit, magnet, recheck, rebuild ... Command line tools for creating, editing, checking and interacting with Bittorrent metainfo files Options ------- -h, --help show this help message and exit -i, --interactive select program options interactively -V, --version show program version and exit -v, --verbose output debug information Actions ------- create, edit, magnet, recheck, rebuild create (c, new) Generate a new torrent meta file. edit (e) Edit existing torrent meta file. magnet (m) Generate magnet url from an existing Bittorrent meta file. recheck (r, check) Calculate amount of torrent meta file's content is found on disk. info (i) Show detailed information about a torrent file. rebuild (build, b) Re-assemble files obtained from a bittorrent file into the appropriate file structure for re-seeding. Read documentation for more information, or use cases. Usage examples can be found in the project documentation on the examples page.","title":"\ud83d\ude80 Usage"},{"location":"#license","text":"Distributed under Apache v2 software license. See LICENSE for more information.","title":"\ud83d\udcdd License"},{"location":"#issues-requests-prs","text":"If you encounter any bugs or would like to request a new feature please open a new issue. PRs and other contributions are welcome https://github.com/alexpdev/torrentfile/issues","title":"\ud83d\udca1 Issues &amp; Requests &amp; PRs"},{"location":"#creating-torrents","text":"Basic torrent file createion > torrentfile create /path/to/content The -t --tracker -a --announce flags add one or more urls to list of trackers. > torrentfile create /path/to/content --tracker http://tracker1.com > torrentfile create -t http://tracker2 http://tracker3 --private /path/to/content > torrentfile create --tracker http://tracker /path/to/content > torrentfile create -t http://tracker1 http://tracker2 /path/to/content the --private flag indicates use by a private tracker the --source flag can be used to help with cross-seeding > torrentfile create --private --source EXAMPLE --tracker https://url1 https://url2 The options for controlling the progress bar using --prog or --progress : 0 : show no progress bar at all 1 : show progress bar (default) > torrentfile create -t http://tracker.com --progress 2 /path/to/content > torrentfile create --prog 0 /path/to/content to specify the save location use the -o or --out flags if the path points to directory the name of torrent is autofilled. > torrentfile create -o /specific/path/name.torrent ./content to create files using bittorrent v2 use --meta-version 2 likewise --meta-version 3 creates a hybrid torrent file. > torrentfile create --meta-version 2 /path/to/content > torrentfile create --meta-version 3 /path/to/content","title":"Creating Torrents"},{"location":"#checkrecheck-torrent","text":"recheck torrent file /path/to/some.torrent with /path/to/content > torrentfile recheck /path/to/some.torrent /path/to/content","title":"Check/Recheck Torrent"},{"location":"#edit-torrent","text":"edit a torrent file > torrentfile edit [options] <path>","title":"Edit Torrent"},{"location":"#create-magnet","text":"To create a magnet URI for a pre-existing torrent meta file, use the sub-command magnet or m with the path to the torrent file. > torrentfile magnet /path/to/some.torrent","title":"Create Magnet"},{"location":"#interactive-mode-expiremental","text":"Alternatively to supplying a bunch of command line arguments, interactive mode allows users to specify program options one at a time from a series of prompts. to activate interactive mode use -i or --interactive flag > torrentfile -i","title":"Interactive Mode (expiremental)"},{"location":"#gui","text":"If you prefer a windowed gui please check out the official GUI frontend here","title":"GUI"},{"location":"Apache2/","text":"Apache License Version 2.0, January 2004 < http://www.apache.org/licenses/ > Terms and Conditions for use, reproduction, and distribution 1. Definitions \u201cLicense\u201d shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \u201cLicensor\u201d shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \u201cLegal Entity\u201d shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \u201ccontrol\u201d means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \u201cYou\u201d (or \u201cYour\u201d) shall mean an individual or Legal Entity exercising permissions granted by this License. \u201cSource\u201d form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \u201cObject\u201d form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \u201cWork\u201d shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \u201cDerivative Works\u201d shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \u201cContribution\u201d shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \u201csubmitted\u201d means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \u201cNot a Contribution.\u201d \u201cContributor\u201d shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \u201cNOTICE\u201d text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets [] replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u201cprinted page\u201d as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"Apache2/#apache-license","text":"Version 2.0, January 2004 < http://www.apache.org/licenses/ >","title":"Apache License"},{"location":"Apache2/#terms-and-conditions-for-use-reproduction-and-distribution","text":"","title":"Terms and Conditions for use, reproduction, and distribution"},{"location":"Apache2/#1-definitions","text":"\u201cLicense\u201d shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \u201cLicensor\u201d shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \u201cLegal Entity\u201d shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \u201ccontrol\u201d means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \u201cYou\u201d (or \u201cYour\u201d) shall mean an individual or Legal Entity exercising permissions granted by this License. \u201cSource\u201d form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \u201cObject\u201d form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \u201cWork\u201d shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \u201cDerivative Works\u201d shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \u201cContribution\u201d shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \u201csubmitted\u201d means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \u201cNot a Contribution.\u201d \u201cContributor\u201d shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.","title":"1. Definitions"},{"location":"Apache2/#2-grant-of-copyright-license","text":"Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.","title":"2. Grant of Copyright License"},{"location":"Apache2/#3-grant-of-patent-license","text":"Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.","title":"3. Grant of Patent License"},{"location":"Apache2/#4-redistribution","text":"You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \u201cNOTICE\u201d text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.","title":"4. Redistribution"},{"location":"Apache2/#5-submission-of-contributions","text":"Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.","title":"5. Submission of Contributions"},{"location":"Apache2/#6-trademarks","text":"This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.","title":"6. Trademarks"},{"location":"Apache2/#7-disclaimer-of-warranty","text":"Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.","title":"7. Disclaimer of Warranty"},{"location":"Apache2/#8-limitation-of-liability","text":"In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.","title":"8. Limitation of Liability"},{"location":"Apache2/#9-accepting-warranty-or-additional-liability","text":"While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"9. Accepting Warranty or Additional Liability"},{"location":"Apache2/#appendix-how-to-apply-the-apache-license-to-your-work","text":"To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets [] replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u201cprinted page\u201d as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"APPENDIX: How to apply the Apache License to your work"},{"location":"Commands/","text":"TorrentFile CLI Menu Help Messages Main Usage ===== torrentfile [-h] [-i] [-V] [-v] <create> <edit> <magnet> <recheck> ... CLI Tool for creating, checking, editing... Bittorrent meta files. TorrentFile supports all versions of torrent files. Options ------- -h, --help show this help message and exit -i, --interactive select program options interactively -V, --version show program version and exit -v, --verbose output debug information Actions ------- <create> <edit> <magnet> <recheck> c (create, new) Create a torrent meta file. e (edit) Edit existing torrent meta file. m (magnet) Create magnet url from an existing Bittorrent meta file. r (recheck, check) Calculate amount of torrent meta file's content is found on disk. i (info) Show detailed information about a torrent file. Create Usage ===== torrentfile c [-h] [-a <url> [<url> ...]] [-p] [-s <source>] [-m] [-c <comment>] [-o <path>] [-t <url> [<url> ...]] [--noprogress] [--meta-version <int>] [--piece-length <int>] [-w <url> [<url> ...]] <content> Positional Arguments -------------------- <content> Path to content file or directory Optional Arguments ------------------ -h, --help show this help message and exit -a <url> [<url> ...], --announce <url> [<url> ...] Alias for -t/--tracker -p, --private Create a private torrent file -s <source>, --source <source> Useful for cross-seeding -m, --magnet Output Magnet Link after creation completes -c <comment>, --comment <comment> Include a comment in file metadata -o <path>, --out <path> Output path for created .torrent file -t <url> [<url> ...], --tracker <url> [<url> ...] One or more Bittorrent tracker announce url(s). --prog, --progress <level> (0) = no progress bar displayed (1) = progress bar is displayed (default) --meta-version <int> Bittorrent metafile version. Options - {1, 2, 3} (1) = Bittorrent v1 (Default) (2) = Bittorrent v2 (3) = Bittorrent v1 & v2 hybrid --piece-length <int> Number of bytes per piece. (Default: None) Acceptable inputs include {14 - 24} as exponent for 2^n, or any acceptable integer value (must be power of 2). Examples:: [--piece-length 14] [--piece-length 16777216] -w <url> [<url> ...], --web-seed <url> [<url> ...] One or more url(s) linking to a http server hosting the torrent contents. This is useful if the torrent tracker is ever unreachable. Example:: -w url1 url2 url3 Edit Usage ===== torrentfile e [-h] [--tracker <url> [<url> ...]] [--web-seed <url> [<url> ...]] [--private] [--comment <comment>] [--source <source>] <*.torrent> Positional Arguments -------------------- <*.torrent> path to *.torrent file Optional Arguments ------------------ -h, --help show this help message and exit --tracker <url> [<url> ...] Replace current list of tracker/announce urls with one or more space seperated Bittorrent tracker announce url(s). --web-seed <url> [<url> ...] Replace current list of web-seed urls with one or more space seperated url(s) --private Make torrent private. --comment <comment> Replaces any existing comment with <comment> --source <source> Replaces current source with <source> Recheck Usage ===== torrentfile r [-h] <*.torrent> <content> Positional Arguments -------------------- <*.torrent> path to .torrent file. <content> path to content file or directory Optional Arguments ------------------ -h, --help show this help message and exit Magnet Usage ===== torrentfile m [-h] <*.torrent> Positional Arguments -------------------- <*.torrent> Path to Bittorrent meta file. Optional Arguments ------------------ -h, --help show this help message and exit","title":"Help"},{"location":"Commands/#torrentfile-cli-menu","text":"","title":"TorrentFile CLI Menu"},{"location":"Commands/#help-messages","text":"","title":"Help Messages"},{"location":"Commands/#main","text":"Usage ===== torrentfile [-h] [-i] [-V] [-v] <create> <edit> <magnet> <recheck> ... CLI Tool for creating, checking, editing... Bittorrent meta files. TorrentFile supports all versions of torrent files. Options ------- -h, --help show this help message and exit -i, --interactive select program options interactively -V, --version show program version and exit -v, --verbose output debug information Actions ------- <create> <edit> <magnet> <recheck> c (create, new) Create a torrent meta file. e (edit) Edit existing torrent meta file. m (magnet) Create magnet url from an existing Bittorrent meta file. r (recheck, check) Calculate amount of torrent meta file's content is found on disk. i (info) Show detailed information about a torrent file.","title":"Main"},{"location":"Commands/#create","text":"Usage ===== torrentfile c [-h] [-a <url> [<url> ...]] [-p] [-s <source>] [-m] [-c <comment>] [-o <path>] [-t <url> [<url> ...]] [--noprogress] [--meta-version <int>] [--piece-length <int>] [-w <url> [<url> ...]] <content> Positional Arguments -------------------- <content> Path to content file or directory Optional Arguments ------------------ -h, --help show this help message and exit -a <url> [<url> ...], --announce <url> [<url> ...] Alias for -t/--tracker -p, --private Create a private torrent file -s <source>, --source <source> Useful for cross-seeding -m, --magnet Output Magnet Link after creation completes -c <comment>, --comment <comment> Include a comment in file metadata -o <path>, --out <path> Output path for created .torrent file -t <url> [<url> ...], --tracker <url> [<url> ...] One or more Bittorrent tracker announce url(s). --prog, --progress <level> (0) = no progress bar displayed (1) = progress bar is displayed (default) --meta-version <int> Bittorrent metafile version. Options - {1, 2, 3} (1) = Bittorrent v1 (Default) (2) = Bittorrent v2 (3) = Bittorrent v1 & v2 hybrid --piece-length <int> Number of bytes per piece. (Default: None) Acceptable inputs include {14 - 24} as exponent for 2^n, or any acceptable integer value (must be power of 2). Examples:: [--piece-length 14] [--piece-length 16777216] -w <url> [<url> ...], --web-seed <url> [<url> ...] One or more url(s) linking to a http server hosting the torrent contents. This is useful if the torrent tracker is ever unreachable. Example:: -w url1 url2 url3","title":"Create"},{"location":"Commands/#edit","text":"Usage ===== torrentfile e [-h] [--tracker <url> [<url> ...]] [--web-seed <url> [<url> ...]] [--private] [--comment <comment>] [--source <source>] <*.torrent> Positional Arguments -------------------- <*.torrent> path to *.torrent file Optional Arguments ------------------ -h, --help show this help message and exit --tracker <url> [<url> ...] Replace current list of tracker/announce urls with one or more space seperated Bittorrent tracker announce url(s). --web-seed <url> [<url> ...] Replace current list of web-seed urls with one or more space seperated url(s) --private Make torrent private. --comment <comment> Replaces any existing comment with <comment> --source <source> Replaces current source with <source>","title":"Edit"},{"location":"Commands/#recheck","text":"Usage ===== torrentfile r [-h] <*.torrent> <content> Positional Arguments -------------------- <*.torrent> path to .torrent file. <content> path to content file or directory Optional Arguments ------------------ -h, --help show this help message and exit","title":"Recheck"},{"location":"Commands/#magnet","text":"Usage ===== torrentfile m [-h] <*.torrent> Positional Arguments -------------------- <*.torrent> Path to Bittorrent meta file. Optional Arguments ------------------ -h, --help show this help message and exit","title":"Magnet"},{"location":"changelog/","text":"TorrentFile Version 0.7.10 Added rebuild module and subcommand see docs for more info Added documentation entry for rebuild subcommand improved logging messages added unit tests improved and expanded on type hints minor bug fixes Version 0.7.9 complete rewrite of the recheck procedures Recheck now provides more accuracy and more details improvements to the new custom progressbar changed the cli argument for the progress bar the options are now just 0 and 1 included new unit tests for all new features marked unused functions as deprecated added a new hasher object for v2 and hybrid torrents minor bug fixes and styling changes Version 0.7.8 more updates to logging major improvements to progress bar removed tqdm as dependency implemented custom progress bar logic new cli argument controlling the progress bar support for pyben 0.3.1 added threading to recheck module added mixins module unit test updates and improvements Version 0.7.5 updates to logging facility fixed bug in created hybrid torrent files fixed cli when subcomman not chosen doc updates unit test updates and improvements Version 0.7.2 cleaned up readme and help messages removed useless print statements improved CI tooling and checking minor bug fixes Version 0.7.1 split CI integration into separate platform specific files added new cli argument --cwd which changes the default save to location to the current working directory (this will be default in future) added unit tests to cover the new argument Changed license to a the more permissive Apache 2 software license Version 0.7.0 Fixed issues with logging to file. Finished adding tests for Unicode Support Deprecated some unneccessary code Clean up documentation and README removed config files no longer in use. Version 0.6.13 Fixed bug that created a torrent file with no name. Fixed bug that would error if cli path was listed after announce urls Added full unicode support. Added Unittests for new features and bug fixes Version 0.6.11 Fixed bug that occured during recheck when file of 0 length is included. Altered Recheck algorithm to process 0 length files. Only effected meta version 2 and hybrid torrent files. Added unittests to cover the situation. Version 0.6.10 Updates to documentation Integrated Type hints in source code Updated build and CI process Version 0.6.9 The --progress flag is now --noprogress Default behavior is to show progress bar use --noprogress to not show added CLI Help format strings added custom CLI help formatter class Titled Help Message section headers Fixed a bunch of error pages created by mkdocs Version 0.6.8 Documentation for newest features CLI usage examples Improved unittests made progress bar active by default Version 0.6.7 Updates to API Version 0.6.6 bug that created faulty Bittorrent V2 meta files in some instances. back to working as it should. Version 0.6.5 Support for creating Magnet URI's Added optional progress bar for torrent creation Log File handler CLI args page in documentation verbose and logging bugs multi tracker errors bug Version 0.6.4 CLI interface add subcommands added interactive mode Re-wrote the recheck module fixed documentation and docstrings linting and testing errors Version 0.6.3 Fixed Bug that would format list of trackers incorrectly CLI Bug Fixes Version 0.6.2 Bug fixes Documentation error pages Version 0.6.0 cli commands alterations debug logging during creation process Version 0.5.2 Fixed Bug that was adding wrong fields to info dict Version 0.5.0 Slew of new unit tests Stricter linting features Alternative method of -re-check feature Bug Fixes CLI help formatting errors Version 0.4.8 Improved Algorithm performance for ReCheck. Additions to documentation. Version 0.4.7 Fixed A bug that misspelled a field when creating Hybrid torrent files. Re-Check procedure for v2 and hybrid torrent file checking. Version 0.4.6 CLI Help and Usage Messages. Expanded CLI args. Completely new CheckerClass which replaces old Checker Hooks for GUI or other 3rd party apps to hook into Checking Documentation and Unit tests for new CheckerClass Version 0.4.5 Documentation and docstrings improvements Better code formating and more detailed docstrings More unit tests. Version 0.4.2 The ReChecker feature now supports v1, v2, & hybrid .torrent file. Bug in CLI for python < 3.8 Version 0.4.1 Added tests for hybrid class Added logging features new cli flag to activate debug mode Documentation theme. Fixed Bug that allowed improper piece length values. Version 0.4.0 Fixed bugs in creating hybrid files. Bug Fix that broke cli. Version 0.3.0 Added/Improved support for hybrid meta files. Many additions to testing suit including linting and coverage tests. Version 0.2.8 Styling fixes. Bug Fixes. Prelimenary support for bittorrent hybrid meta files. Bug Fixes Version 0.2.7 major imporvements to torrentfile-GUI. minor adjustments to this package for integration. Code consolidation Bug Fixes Documentation additions Implemented CI/CD Integration Version 0.2.3 Bug Fixes Code Style and Formatting Added more unittests Version 0.2.1 Bittorrent Protocol V2 Support v2 metafile options to cli v2 metafile tests Version 0.1.7 Docstrings Improvements. Added documentation rederer. Improved readme file. formatting Version 0.1.2 Added a Command Line Interface Rough Graphical User Interface Minor Bug Fixes Improved unittest coverage Version 0.1.0 added SHA256 support Feeder class for seemless file switching Fixed the primary entrypoint function. Improved docstrings Bug fixes Version 0.0.2 Added Unittests added bencode support added hashing support Version 0.0.1 Initial concept and planning","title":"Changelog"},{"location":"changelog/#torrentfile","text":"","title":"TorrentFile"},{"location":"changelog/#version-0710","text":"Added rebuild module and subcommand see docs for more info Added documentation entry for rebuild subcommand improved logging messages added unit tests improved and expanded on type hints minor bug fixes","title":"Version 0.7.10"},{"location":"changelog/#version-079","text":"complete rewrite of the recheck procedures Recheck now provides more accuracy and more details improvements to the new custom progressbar changed the cli argument for the progress bar the options are now just 0 and 1 included new unit tests for all new features marked unused functions as deprecated added a new hasher object for v2 and hybrid torrents minor bug fixes and styling changes","title":"Version 0.7.9"},{"location":"changelog/#version-078","text":"more updates to logging major improvements to progress bar removed tqdm as dependency implemented custom progress bar logic new cli argument controlling the progress bar support for pyben 0.3.1 added threading to recheck module added mixins module unit test updates and improvements","title":"Version 0.7.8"},{"location":"changelog/#version-075","text":"updates to logging facility fixed bug in created hybrid torrent files fixed cli when subcomman not chosen doc updates unit test updates and improvements","title":"Version 0.7.5"},{"location":"changelog/#version-072","text":"cleaned up readme and help messages removed useless print statements improved CI tooling and checking minor bug fixes","title":"Version 0.7.2"},{"location":"changelog/#version-071","text":"split CI integration into separate platform specific files added new cli argument --cwd which changes the default save to location to the current working directory (this will be default in future) added unit tests to cover the new argument Changed license to a the more permissive Apache 2 software license","title":"Version 0.7.1"},{"location":"changelog/#version-070","text":"Fixed issues with logging to file. Finished adding tests for Unicode Support Deprecated some unneccessary code Clean up documentation and README removed config files no longer in use.","title":"Version 0.7.0"},{"location":"changelog/#version-0613","text":"Fixed bug that created a torrent file with no name. Fixed bug that would error if cli path was listed after announce urls Added full unicode support. Added Unittests for new features and bug fixes","title":"Version 0.6.13"},{"location":"changelog/#version-0611","text":"Fixed bug that occured during recheck when file of 0 length is included. Altered Recheck algorithm to process 0 length files. Only effected meta version 2 and hybrid torrent files. Added unittests to cover the situation.","title":"Version 0.6.11"},{"location":"changelog/#version-0610","text":"Updates to documentation Integrated Type hints in source code Updated build and CI process","title":"Version 0.6.10"},{"location":"changelog/#version-069","text":"The --progress flag is now --noprogress Default behavior is to show progress bar use --noprogress to not show added CLI Help format strings added custom CLI help formatter class Titled Help Message section headers Fixed a bunch of error pages created by mkdocs","title":"Version 0.6.9"},{"location":"changelog/#version-068","text":"Documentation for newest features CLI usage examples Improved unittests made progress bar active by default","title":"Version 0.6.8"},{"location":"changelog/#version-067","text":"Updates to API","title":"Version 0.6.7"},{"location":"changelog/#version-066","text":"bug that created faulty Bittorrent V2 meta files in some instances. back to working as it should.","title":"Version 0.6.6"},{"location":"changelog/#version-065","text":"Support for creating Magnet URI's Added optional progress bar for torrent creation Log File handler CLI args page in documentation verbose and logging bugs multi tracker errors bug","title":"Version 0.6.5"},{"location":"changelog/#version-064","text":"CLI interface add subcommands added interactive mode Re-wrote the recheck module fixed documentation and docstrings linting and testing errors","title":"Version 0.6.4"},{"location":"changelog/#version-063","text":"Fixed Bug that would format list of trackers incorrectly CLI Bug Fixes","title":"Version 0.6.3"},{"location":"changelog/#version-062","text":"Bug fixes Documentation error pages","title":"Version 0.6.2"},{"location":"changelog/#version-060","text":"cli commands alterations debug logging during creation process","title":"Version 0.6.0"},{"location":"changelog/#version-052","text":"Fixed Bug that was adding wrong fields to info dict","title":"Version 0.5.2"},{"location":"changelog/#version-050","text":"Slew of new unit tests Stricter linting features Alternative method of -re-check feature Bug Fixes CLI help formatting errors","title":"Version 0.5.0"},{"location":"changelog/#version-048","text":"Improved Algorithm performance for ReCheck. Additions to documentation.","title":"Version 0.4.8"},{"location":"changelog/#version-047","text":"Fixed A bug that misspelled a field when creating Hybrid torrent files. Re-Check procedure for v2 and hybrid torrent file checking.","title":"Version 0.4.7"},{"location":"changelog/#version-046","text":"CLI Help and Usage Messages. Expanded CLI args. Completely new CheckerClass which replaces old Checker Hooks for GUI or other 3rd party apps to hook into Checking Documentation and Unit tests for new CheckerClass","title":"Version 0.4.6"},{"location":"changelog/#version-045","text":"Documentation and docstrings improvements Better code formating and more detailed docstrings More unit tests.","title":"Version 0.4.5"},{"location":"changelog/#version-042","text":"The ReChecker feature now supports v1, v2, & hybrid .torrent file. Bug in CLI for python < 3.8","title":"Version 0.4.2"},{"location":"changelog/#version-041","text":"Added tests for hybrid class Added logging features new cli flag to activate debug mode Documentation theme. Fixed Bug that allowed improper piece length values.","title":"Version 0.4.1"},{"location":"changelog/#version-040","text":"Fixed bugs in creating hybrid files. Bug Fix that broke cli.","title":"Version 0.4.0"},{"location":"changelog/#version-030","text":"Added/Improved support for hybrid meta files. Many additions to testing suit including linting and coverage tests.","title":"Version 0.3.0"},{"location":"changelog/#version-028","text":"Styling fixes. Bug Fixes. Prelimenary support for bittorrent hybrid meta files. Bug Fixes","title":"Version 0.2.8"},{"location":"changelog/#version-027","text":"major imporvements to torrentfile-GUI. minor adjustments to this package for integration. Code consolidation Bug Fixes Documentation additions Implemented CI/CD Integration","title":"Version 0.2.7"},{"location":"changelog/#version-023","text":"Bug Fixes Code Style and Formatting Added more unittests","title":"Version 0.2.3"},{"location":"changelog/#version-021","text":"Bittorrent Protocol V2 Support v2 metafile options to cli v2 metafile tests","title":"Version 0.2.1"},{"location":"changelog/#version-017","text":"Docstrings Improvements. Added documentation rederer. Improved readme file. formatting","title":"Version 0.1.7"},{"location":"changelog/#version-012","text":"Added a Command Line Interface Rough Graphical User Interface Minor Bug Fixes Improved unittest coverage","title":"Version 0.1.2"},{"location":"changelog/#version-010","text":"added SHA256 support Feeder class for seemless file switching Fixed the primary entrypoint function. Improved docstrings Bug fixes","title":"Version 0.1.0"},{"location":"changelog/#version-002","text":"Added Unittests added bencode support added hashing support","title":"Version 0.0.2"},{"location":"changelog/#version-001","text":"Initial concept and planning","title":"Version 0.0.1"},{"location":"man/","text":"torrentfile Manual Synopsis torrentfile [options] <subcommand> [options] <args> Description torrentfile is a command line toolkit for working with Bittorrent files(.torrent). Some of the tools available include creating torrent files, editing portions of a torrent file, checking the integrity or completeness of downloaded torrent contents, displaying details of a torrentfile, generating magnet URLs for torrentfiles, and individual or batch rebuilding of torrent contents into their original directory structure. Options -h displays all relevant command line options and subcommands. -V displays program and version. -v enables debug mode and outputs a large amount of information to the terminal. -i activates interactive mode for selecting subcommands and options. Sub-commands create alias: c , new torrentfile create [options] <path> torrentfile c [options] <path> The create subcommand is used for generating new torrent files. The only required argument is the path( <path> ) to the contents file or directory. -a -t --announce --tracker Adds the list of url's that follow to the list of trackers for the newly created torrent file. Example -t http://url1 https://url2 ... -w --web-seeds Adds the list of urls that follow to the list of web-seed addresses for the newly created torrent file. --comment Includes the comment that follows to the metadata saved in the newly created torrent file. Example: --comment \"Created for MyTrackerExample.com\" --source Creates a source field in the info dictionary with the string that follows as the value. Frequently used for cross-seeding on private trackers. Example: --source MyTrackerExample -p --private Indicates that the torrent will be used on a private tracker. Disables multi-tracker protocols and DHT. --piece-length Uses the number that follows as the piece-length size for the newly created torrent file. If option isn't used the program will pick the ideal size. Acceptable values include 14-29 which is interpreted as the number to raise 2 by (e.g. 14 is interpreted as 16384), or any perfect power of 2 greater than or equal to 16 KiB and less than 1 GiB. Example: --piece-length 14 or --piece-length 16384 . --meta-version Use the following number as the Bittorrent version the torrent will be used on. The default is 1. Options: 1 - Bittorrent v1, 2 - Bittorrent v2, 3 - Bittorrent v1 & v2 Examples: --meta-version 1 , --meta-version 2 , --meta-version 3 -o --out Specify the full path to the newly created torrent file. The default is to save it adjacent to the content. Example: if content is at /home/user/torrents/content the default would create /home/user/torrents/content.torrent --cwd --current Changes the default save location to the current working directory. Example: if content is at /home/user/torrents/content this option would create ./content.torrent --progress --prog Options (0, 1): No status bar will be shown if 0. Otherwise the default and 1 argument means progress bar is shown info alias: i torrentfile info <path> torrentfile i <path> Display detailed information about a torrentfile such as trackers, size of contents, Bittorrent version, any comments left, date the torrent file was created and more. There is only one positional perameter which is the path to the torrent file and there are no optional arguments. /path/to/*.torrent The relative or absolute path to the torrent file. edit Edit some of the different information detailed in a torrent file. The fields that are editable each have option flags detialed below. Each option identifies the field to edit inside the torrent file and what the new value should be. If an option is not used then its field will be ommited in the newly created torrent file. As such if the file is marked as private and it should remain that way, the -p option should be used. alias: e torrentfile edit [options] <path> torrentfile e [options] <path> -a -t --announce --tracker Adds the list of url's that follow to the list of trackers for the newly created torrent file. Example -t http://url1 https://url2 ... -w --web-seeds Adds the list of urls that follow to the list of web-seed addresses for the newly created torrent file. --comment Includes the comment that follows to the metadata saved in the newly created torrent file. Example: --comment \"Created for MyTrackerExample.com\" --source Creates a source field in the info dictionary with the string that follows as the value. Frequently used for cross-seeding on private trackers. Example: --source MyTrackerExample -p --private Indicates that the torrent will be used on a private tracker. Disables multi-tracker protocols and DHT. recheck Recheck requires two paths as arguments. The first is the path to a torrent file, and and the second is a path to the file of directory containing the downloaded data from that torrentfile. torrentfile recursively validates each file with the hashes contained in the torrentfile, and displays the amount missing frome each file, plus a final percentage for the whole torrent at the conclusion. This will display a progress bar for each file including missing files. It is also permitted to use the contents parent directory which can help for batch processing many torrent files. alias: r , check torrentfile recheck <*.torrent> <contents> torrentfile r <*.torrent> <contents> Magnet Generate a magnet URL for a torrent file. alias: m torrentfile magnet <path/to/*.torrent> Rebuild Rebuild individual or batches of torrent contents into the original file structure. The program takes a path to a torrent file or directory containing torrent files, the directory containing the torrent contents, and the destination directory to where the rebuilt torrent content wil be located. The program will recursively traverse the content directory searching for file's that match one of the meta files and creates copies of the matches to the destination directory. The original files are not effected and any existing files in the target directory will not be overwritten. alias: build , b torrentfile rebuild <metafiles> <contents> <destination>","title":"Details"},{"location":"man/#torrentfile-manual","text":"","title":"torrentfile Manual"},{"location":"man/#synopsis","text":"torrentfile [options] <subcommand> [options] <args>","title":"Synopsis"},{"location":"man/#description","text":"torrentfile is a command line toolkit for working with Bittorrent files(.torrent). Some of the tools available include creating torrent files, editing portions of a torrent file, checking the integrity or completeness of downloaded torrent contents, displaying details of a torrentfile, generating magnet URLs for torrentfiles, and individual or batch rebuilding of torrent contents into their original directory structure.","title":"Description"},{"location":"man/#options","text":"-h displays all relevant command line options and subcommands. -V displays program and version. -v enables debug mode and outputs a large amount of information to the terminal. -i activates interactive mode for selecting subcommands and options.","title":"Options"},{"location":"man/#sub-commands","text":"","title":"Sub-commands"},{"location":"man/#create","text":"alias: c , new torrentfile create [options] <path> torrentfile c [options] <path> The create subcommand is used for generating new torrent files. The only required argument is the path( <path> ) to the contents file or directory. -a -t --announce --tracker Adds the list of url's that follow to the list of trackers for the newly created torrent file. Example -t http://url1 https://url2 ... -w --web-seeds Adds the list of urls that follow to the list of web-seed addresses for the newly created torrent file. --comment Includes the comment that follows to the metadata saved in the newly created torrent file. Example: --comment \"Created for MyTrackerExample.com\" --source Creates a source field in the info dictionary with the string that follows as the value. Frequently used for cross-seeding on private trackers. Example: --source MyTrackerExample -p --private Indicates that the torrent will be used on a private tracker. Disables multi-tracker protocols and DHT. --piece-length Uses the number that follows as the piece-length size for the newly created torrent file. If option isn't used the program will pick the ideal size. Acceptable values include 14-29 which is interpreted as the number to raise 2 by (e.g. 14 is interpreted as 16384), or any perfect power of 2 greater than or equal to 16 KiB and less than 1 GiB. Example: --piece-length 14 or --piece-length 16384 . --meta-version Use the following number as the Bittorrent version the torrent will be used on. The default is 1. Options: 1 - Bittorrent v1, 2 - Bittorrent v2, 3 - Bittorrent v1 & v2 Examples: --meta-version 1 , --meta-version 2 , --meta-version 3 -o --out Specify the full path to the newly created torrent file. The default is to save it adjacent to the content. Example: if content is at /home/user/torrents/content the default would create /home/user/torrents/content.torrent --cwd --current Changes the default save location to the current working directory. Example: if content is at /home/user/torrents/content this option would create ./content.torrent --progress --prog Options (0, 1): No status bar will be shown if 0. Otherwise the default and 1 argument means progress bar is shown","title":"create"},{"location":"man/#info","text":"alias: i torrentfile info <path> torrentfile i <path> Display detailed information about a torrentfile such as trackers, size of contents, Bittorrent version, any comments left, date the torrent file was created and more. There is only one positional perameter which is the path to the torrent file and there are no optional arguments. /path/to/*.torrent The relative or absolute path to the torrent file.","title":"info"},{"location":"man/#edit","text":"Edit some of the different information detailed in a torrent file. The fields that are editable each have option flags detialed below. Each option identifies the field to edit inside the torrent file and what the new value should be. If an option is not used then its field will be ommited in the newly created torrent file. As such if the file is marked as private and it should remain that way, the -p option should be used. alias: e torrentfile edit [options] <path> torrentfile e [options] <path> -a -t --announce --tracker Adds the list of url's that follow to the list of trackers for the newly created torrent file. Example -t http://url1 https://url2 ... -w --web-seeds Adds the list of urls that follow to the list of web-seed addresses for the newly created torrent file. --comment Includes the comment that follows to the metadata saved in the newly created torrent file. Example: --comment \"Created for MyTrackerExample.com\" --source Creates a source field in the info dictionary with the string that follows as the value. Frequently used for cross-seeding on private trackers. Example: --source MyTrackerExample -p --private Indicates that the torrent will be used on a private tracker. Disables multi-tracker protocols and DHT.","title":"edit"},{"location":"man/#recheck","text":"Recheck requires two paths as arguments. The first is the path to a torrent file, and and the second is a path to the file of directory containing the downloaded data from that torrentfile. torrentfile recursively validates each file with the hashes contained in the torrentfile, and displays the amount missing frome each file, plus a final percentage for the whole torrent at the conclusion. This will display a progress bar for each file including missing files. It is also permitted to use the contents parent directory which can help for batch processing many torrent files. alias: r , check torrentfile recheck <*.torrent> <contents> torrentfile r <*.torrent> <contents>","title":"recheck"},{"location":"man/#magnet","text":"Generate a magnet URL for a torrent file. alias: m torrentfile magnet <path/to/*.torrent>","title":"Magnet"},{"location":"man/#rebuild","text":"Rebuild individual or batches of torrent contents into the original file structure. The program takes a path to a torrent file or directory containing torrent files, the directory containing the torrent contents, and the destination directory to where the rebuilt torrent content wil be located. The program will recursively traverse the content directory searching for file's that match one of the meta files and creates copies of the matches to the destination directory. The original files are not effected and any existing files in the target directory will not be overwritten. alias: build , b torrentfile rebuild <metafiles> <contents> <destination>","title":"Rebuild"},{"location":"source/","text":"TorrentFile API and Source Torrent Module module torrentfile. torrent Classes and procedures pertaining to the creation of torrent meta files. Classes TorrentFile construct .torrent file. TorrentFileV2 construct .torrent v2 files using provided data. MetaFile base class for all MetaFile classes. Constants BLOCK_SIZE : int size of leaf hashes for merkle tree. HASH_SIZE : int Length of a sha256 hash. Bittorrent V2 From Bittorrent.org Documentation pages. Implementation details for Bittorrent Protocol v2. Note All strings in a .torrent file that contain text must be UTF-8 encoded. Meta Version 2 Dictionary: \"announce\": The URL of the tracker. \"info\": This maps to a dictionary, with keys described below. \"name\": A display name for the torrent. It is purely advisory. \"piece length\": The number of bytes that each logical piece in the peer protocol refers to. I.e. it sets the granularity of piece, request, bitfield and have messages. It must be a power of two and at least 6KiB. \"meta version\": An integer value, set to 2 to indicate compatibility with the current revision of this specification. Version 1 is not assigned to avoid confusion with BEP3. Future revisions will only increment this issue to indicate an incompatible change has been made, for example that hash algorithms were changed due to newly discovered vulnerabilities. Lementations must check this field first and indicate that a torrent is of a newer version than they can handle before performing other idations which may result in more general messages about invalid files. Files are mapped into this piece address space so that each non-empty \"file tree\": A tree of dictionaries where dictionary keys represent UTF-8 encoded path elements. Entries with zero-length keys describe the properties of the composed path at that point. 'UTF-8 encoded' context only means that if the native encoding is known at creation time it must be converted to UTF-8. Keys may contain invalid UTF-8 sequences or characters and names that are reserved on specific filesystems. Implementations must be prepared to sanitize them. On platforms path components exactly matching '.' and '..' must be sanitized since they could lead to directory traversal attacks and conflicting path descriptions. On platforms that require UTF-8 path components this sanitizing step must happen after normalizing overlong UTF-8 encodings. File is aligned to a piece boundary and occurs in same order as the file tree. The last piece of each file may be shorter than the specified piece length, resulting in an alignment gap. \"length\": Length of the file in bytes. Presence of this field indicates that the dictionary describes a file, not a directory. Which means it must not have any sibling entries. \"pieces root\": For non-empty files this is the the root hash of a merkle tree with a branching factor of 2, constructed from 16KiB blocks of the file. The last block may be shorter than 16KiB. The remaining leaf hashes beyond the end of the file required to construct upper layers of the merkle tree are set to zero. As of meta version 2 SHA2-256 is used as digest function for the merkle tree. The hash is stored in its binary form, not as human-readable string. \"piece layers\": A dictionary of strings. For each file in the file tree that is larger than the piece size it contains one string value. The keys are the merkle roots while the values consist of concatenated hashes of one layer within that merkle tree. The layer is chosen so that one hash covers piece length bytes. For example if the piece size is 16KiB then the leaf hashes are used. If a piece size of 128KiB is used then 3rd layer up from the leaf hashes is used. Layer hashes which exclusively cover data beyond the end of file, i.e. are only needed to balance the tree, are omitted. All hashes are stored in their binary format. A torrent is not valid if this field is absent, the contained hashes do not match the merkle roots or are not from the correct layer. Important The file tree root dictionary itself must not be a file, i.e. it must not contain a zero-length key with a dictionary containing a length key. Bittorrent V1 v1 meta-dictionary announce: The URL of the tracker. info: This maps to a dictionary, with keys described below. name : maps to a UTF-8 encoded string which is the suggested name to save the file (or directory) as. It is purely advisory. piece length : maps to the number of bytes in each piece the file is split into. For the purposes of transfer, files are split into fixed-size pieces which are all the same length except for possibly the last one which may be truncated. piece length : is almost always a power of two, most commonly 2^18 = 256 K pieces : maps to a string whose length is a multiple of 20. It is to be subdivided into strings of length 20, each of which is the SHA1 hash of the piece at the corresponding index. length : In the single file case, maps to the length of the file in bytes. files : If present then the download represents a single file, otherwise it represents a set of files which go in a directory structure. For the purposes of the other keys, the multi-file case is treated as only having a single file by concatenating the files in the order they appear in the files list. The files list is the value files maps to, and is a list of dictionaries containing the following keys: path : A list of UTF-8 encoded strings corresponding to subdirectory names, the last of which is the actual file name length : Maps to the length of the file in bytes. length : Only present if the content is a single file. Maps to the length of the file in bytes. Note In the single file case, the name key is the name of a file, in the muliple file case, it's the name of a directory. Classes MetaFile \u2014 Base Class for all TorrentFile classes. TorrentFile \u2014 Class for creating Bittorrent meta files. TorrentFileV2 \u2014 Class for creating Bittorrent meta v2 files. TorrentFileHybrid \u2014 Construct the Hybrid torrent meta file with provided parameters. TorrentAssembler \u2014 Assembler class for Bittorrent version 2 and hybrid meta files. Utils Module module torrentfile. utils Utility functions and classes used throughout package. Functions: get_piece_length: calculate ideal piece length for torrent file. sortfiles: traverse directory in sorted order yielding paths encountered. path_size: Sum the sizes of each file in path. get_file_list: Return list of all files contained in directory. path_stat: Get ideal piece length, total size, and file list for directory. path_piece_length: Get ideal piece length based on size of directory. Classes: MissingPathError: Custom exception raised when no path was provided to CLI. PieceLengthValueError: Custom exception raised when incorrect input value used for piece length field. Classes Memo \u2014 Memoice chache object. MissingPathError \u2014 Path parameter is required to specify target content. PieceLengthValueError \u2014 Piece Length parameter must equal a perfect power of 2. Functions get_file_list ( path ) (list) \u2014 Return a sorted list of file paths contained in directory. get_piece_length ( size ) (int) \u2014 Calculate the ideal piece length for bittorrent data. humanize_bytes ( amount ) (str) \u2014 Convert integer into human readable memory sized denomination. next_power_2 ( value ) (int) \u2014 Calculate the next perfect power of 2 equal to or greater than value. normalize_piece_length ( piece_length ) (int) \u2014 Verify input piece_length is valid and convert accordingly. path_piece_length ( path ) (int) \u2014 Calculate piece length for input path and contents. path_size ( path ) (int) \u2014 Return the total size of all files in path recursively. path_stat ( path ) (list) \u2014 Calculate directory statistics. Edit Module module torrentfile. edit Edit torrent module. Provides a facility by which certain properties of a torrent meta file can be edited by the user. The various command line arguments indicate which fields should be edited, and what the new value should be. Depending on what fields are chosen to edit, this command can trigger a new info hash which means the torrent will no longer be able to participate in the same swarm as the original unedited torrent. Keywords private comment source trackers web-seeds Functions edit_torrent ( metafile , args ) (dict) \u2014 Edit the properties and values in a torrent meta file. filter_empty ( args , meta , info ) \u2014 Remove dictionary keys with empty values. Interactive Module module torrentfile. interactive Module contains the procedures used for Interactive Mode. Classes InteractiveEditor \u2014 Interactive dialog class for torrent editing. InteractiveCreator \u2014 Class namespace for interactive program options. Functions create_torrent ( ) \u2014 Create new torrent file interactively. edit_action ( ) \u2014 Edit the editable values of the torrent meta file. get_input ( *args ) (str) \u2014 Determine appropriate input function to call. recheck_torrent ( ) \u2014 Check torrent download completed percentage. select_action ( ) \u2014 Operate TorrentFile program interactively through terminal. showcenter ( txt ) \u2014 Print text to screen in the center position of the terminal. showtext ( txt ) \u2014 Print contents of txt to screen. CLI Module module torrentfile. cli Command Line Interface for TorrentFile project. This module provides the primary command line argument parser for the torrentfile package. The main_script function is automatically invoked when called from command line, and parses accompanying arguments. Functions: main_script: process command line arguments and run program. activate_logger: turns on debug mode and logging facility. Classes TorrentFileHelpFormatter \u2014 Formatting class for help tips provided by the CLI. Functions activate_logger ( ) \u2014 Activate the builtin logging mechanism when passed debug flag from CLI. execute ( args ) (list) \u2014 Initialize Command Line Interface for torrentfile. execute ( args ) (list) \u2014 Initialize Command Line Interface for torrentfile. main ( ) \u2014 Initiate main function for CLI script. Recheck Module module torrentfile. recheck Module container Checker Class. The CheckerClass takes a torrentfile and tha path to it's contents. It will then iterate through every file and directory contained and compare their data to values contained within the torrent file. Completion percentages will be printed to screen for each file and at the end for the torrentfile as a whole. Classes Checker \u2014 Check a given file or directory to see if it matches a torrentfile. FeedChecker \u2014 Validates torrent content. HashChecker \u2014 Iterate through contents of meta data and verify with file contents. Hasher Module module torrentfile. hasher Piece/File Hashers for Bittorrent meta file contents. Classes Hasher \u2014 Piece hasher for Bittorrent V1 files. HasherV2 \u2014 Calculate the root hash and piece layers for file contents. HasherHybrid \u2014 Calculate root and piece hashes for creating hybrid torrent file. FileHasher \u2014 Calculate root and piece hashes for creating hybrid torrent file. Functions merkle_root ( blocks ) (bytes) \u2014 Calculate the merkle root for a seq of sha256 hash digests. ---------- Torrentfile can create Bittorrent metafiles for any content. Both Bittorrent v1 and v2 are fully supported. Also included is a torrent torrent file checker, which can verify a .torrent file is formated correctly as well as validate files and folders against metadata. Modules: metafile: Creation/Validation of v1 .torrent files. metafile2: Creation/Validation of v2 .torrent files. torrentfile: torrentfiles Command Line Interface implementation. exceptions: Custom Exceptions used in package. utils: Utilities used throughout package. create ( args ) Execute the create CLI sub-command to create a new torrent metafile. Parameters: Name Type Description Default args argparse . Namespace positional and optional CLI arguments. required Returns: Type Description torrentfile . MetaFile object containing the path to created metafile and its contents. execute ( args = None ) Initialize Command Line Interface for torrentfile. Parameters: Name Type Description Default args list Commandline arguments. default=None None Returns: Type Description list Depends on what the command line args were. info ( args ) Show torrent metafile details to user via stdout. Parameters: Name Type Description Default args dict command line arguements provided by the user. required magnet ( metafile ) Create a magnet URI from a Bittorrent meta file. Parameters: Name Type Description Default metafile (Namespace||str) Namespace class for CLI arguments. required Returns: Type Description str created magnet URI. __main__ Enable calling the package directly with python from the command line. main () Program entry point. cli Command Line Interface for TorrentFile project. This module provides the primary command line argument parser for the torrentfile package. The main_script function is automatically invoked when called from command line, and parses accompanying arguments. Functions: main_script: process command line arguments and run program. activate_logger: turns on debug mode and logging facility. TorrentFileHelpFormatter Bases: HelpFormatter Formatting class for help tips provided by the CLI. Subclasses Argparse.HelpFormatter. __init__ ( prog , width = 40 , max_help_positions = 30 ) Construct HelpFormat class for usage output. Parameters: Name Type Description Default prog str Name of the program. required width int Max width of help message output. 40 max_help_positions int max length until line wrap. 30 _format_text ( text ) Format text for cli usage messages. Parameters: Name Type Description Default text str Pre-formatted text. required Returns: Type Description str Formatted text from input. _join_parts ( part_strings ) Combine different sections of the help message. Parameters: Name Type Description Default part_strings list List of argument help messages and headers. required Returns: Type Description str Fully formatted help message for CLI. _split_lines ( text , _ ) Split multiline help messages and remove indentation. Parameters: Name Type Description Default text str text that needs to be split required _ int max width for line. required format_headers ( parts ) staticmethod Format help message section headers. Parameters: Name Type Description Default parts list List of individual lines for help message. required Returns: Type Description list Input list with formatted section headers. activate_logger () Activate the builtin logging mechanism when passed debug flag from CLI. execute ( args = None ) Initialize Command Line Interface for torrentfile. Parameters: Name Type Description Default args list Commandline arguments. default=None None Returns: Type Description list Depends on what the command line args were. main () Initiate main function for CLI script. commands The commands module contains the Action Commands executed by the CLI script. Each function pertains to a command line action/subcommand and drives specific features of the application. Functions create_command info_command edit_command recheck_command magnet_command create ( args ) Execute the create CLI sub-command to create a new torrent metafile. Parameters: Name Type Description Default args argparse . Namespace positional and optional CLI arguments. required Returns: Type Description torrentfile . MetaFile object containing the path to created metafile and its contents. edit ( args ) Execute the edit CLI sub-command with provided arguments. Parameters: Name Type Description Default args Namespace positional and optional CLI arguments. required Returns: Type Description str path to edited torrent file. info ( args ) Show torrent metafile details to user via stdout. Parameters: Name Type Description Default args dict command line arguements provided by the user. required magnet ( metafile ) Create a magnet URI from a Bittorrent meta file. Parameters: Name Type Description Default metafile (Namespace||str) Namespace class for CLI arguments. required Returns: Type Description str created magnet URI. rebuild ( args ) Attempt to rebuild a torrent based on the a torrent file. Recusively look through a directory for files that belong in a given torrent file, and rebuild as much of the torrent file as possible. Parameters: Name Type Description Default args list Command line arguments including the paths neccessary required Returns: Type Description int Total number of content files copied to the rebuild directory. recheck ( args ) Execute recheck CLI sub-command. Parameters: Name Type Description Default args Namespace positional and optional arguments. required Returns: Type Description str The percentage of content currently saved to disk. edit Edit torrent module. Provides a facility by which certain properties of a torrent meta file can be edited by the user. The various command line arguments indicate which fields should be edited, and what the new value should be. Depending on what fields are chosen to edit, this command can trigger a new info hash which means the torrent will no longer be able to participate in the same swarm as the original unedited torrent. Keywords private comment source trackers web-seeds edit_torrent ( metafile , args ) Edit the properties and values in a torrent meta file. Parameters: Name Type Description Default metafile str path to the torrent meta file. required args dict key value pairs of the properties to be edited. required Returns: Type Description dict The edited and nested Meta and info dictionaries. filter_empty ( args , meta , info ) Remove dictionary keys with empty values. Parameters: Name Type Description Default args dict Editable metafile properties from user. required meta dict Metafile data dictionary. required info dict Metafile info dictionary. required hasher Piece/File Hashers for Bittorrent meta file contents. FileHasher Bases: CbMixin , ProgMixin Calculate root and piece hashes for creating hybrid torrent file. Create merkle tree layers from sha256 hashed 16KiB blocks of contents. With a branching factor of 2, merge layer hashes until blocks equal piece_length bytes for the piece layer, and then the root hash. Parameters: Name Type Description Default path str path to target file. required piece_length int piece length for data chunks. required progress int default = None True __init__ ( path , piece_length , progress = True , hybrid = False ) Construct Hasher class instances for each file in torrent. __iter__ () Return self : needed to implement iterator implementation. __next__ () Calculate layer hashes for contents of file. Returns: Type Description bytes The layer merckle root hash. _calculate_root () Calculate the root hash for opened file. _pad_remaining ( block_count ) Generate Hash sized, 0 filled bytes for padding. Parameters: Name Type Description Default block_count int current total number of blocks collected. required Returns: Name Type Description padding bytes Padding to fill remaining portion of tree. Hasher Bases: CbMixin , ProgMixin Piece hasher for Bittorrent V1 files. Takes a sorted list of all file paths, calculates sha1 hash for fixed size pieces of file data from each file seemlessly until the last piece which may be smaller than others. Parameters: Name Type Description Default paths list List of files. required piece_length int Size of chuncks to split the data into. required progress int default = None True __init__ ( paths , piece_length , progress = True ) Generate hashes of piece length data from filelist contents. __iter__ () Iterate through feed pieces. Returns: Name Type Description self iterator Iterator for leaves/hash pieces. __next__ () Generate piece-length pieces of data from input file list. Returns: Type Description bytes SHA1 hash of the piece extracted. _handle_partial ( arr ) Define the handling partial pieces that span 2 or more files. Parameters: Name Type Description Default arr bytearray Incomplete piece containing partial data required Returns: Name Type Description digest bytearray SHA1 digest of the complete piece. next_file () Seemlessly transition to next file in file list. Returns: Name Type Description bool bool True if there is a next file otherwise False. HasherHybrid Bases: CbMixin , ProgMixin Calculate root and piece hashes for creating hybrid torrent file. DEPRECATED Create merkle tree layers from sha256 hashed 16KiB blocks of contents. With a branching factor of 2, merge layer hashes until blocks equal piece_length bytes for the piece layer, and then the root hash. Parameters: Name Type Description Default path str path to target file. required piece_length int piece length for data chunks. required progress int default = None True __init__ ( path , piece_length , progress = True ) Construct Hasher class instances for each file in torrent. DEPRECATED _calculate_root () Calculate the root hash for opened file. DEPRECATED _pad_remaining ( block_count ) Generate Hash sized, 0 filled bytes for padding. DEPRECATED Parameters: Name Type Description Default block_count int current total number of blocks collected. required Returns: Name Type Description padding bytes Padding to fill remaining portion of tree. process_file ( data ) Calculate layer hashes for contents of file. DEPRECATED Parameters: Name Type Description Default data BytesIO File opened in read mode. required HasherV2 Bases: CbMixin , ProgMixin Calculate the root hash and piece layers for file contents. DEPRECATED Iterates over 16KiB blocks of data from given file, hashes the data, then creates a hash tree from the individual block hashes until size of hashed data equals the piece-length. Then continues the hash tree until root hash is calculated. Parameters: Name Type Description Default path str Path to file. required piece_length int Size of layer hashes pieces. required progress int default = None True __init__ ( path , piece_length , progress = True ) Calculate and store hash information for specific file. DEPRECATED _calculate_root () Calculate root hash for the target file. DEPRECATED process_file ( fd ) Calculate hashes over 16KiB chuncks of file content. DEPRECATED Parameters: Name Type Description Default fd TextIOWrapper Opened file in read mode. required merkle_root ( blocks ) Calculate the merkle root for a seq of sha256 hash digests. Parameters: Name Type Description Default blocks list a sequence of sha256 layer hashes. required Returns: Type Description bytes the sha256 root hash of the merkle tree. interactive Module contains the procedures used for Interactive Mode. InteractiveCreator Class namespace for interactive program options. __init__ () Initialize interactive meta file creator dialog. get_props () Gather details for torrentfile from user. InteractiveEditor Interactive dialog class for torrent editing. __init__ ( metafile ) Initialize the Interactive torrent editor guide. Parameters: Name Type Description Default metafile str user input string identifying the path to a torrent meta file. required edit_props () Loop continuosly for edits until user signals DONE. sanatize_response ( key , response ) Convert the input data into a form recognizable by the program. Parameters: Name Type Description Default key str name of the property and attribute being eddited. required response str User input value the property is being edited to. required show_current () Display the current met file information to screen. _get_input ( txt ) Gather information needed from user. Parameters: Name Type Description Default txt str The message usually containing instructions for the user. required Returns: Type Description str The text input received from the user. _get_input_loop ( txt , func ) Gather information needed from user. Parameters: Name Type Description Default txt str The message usually containing instructions for the user. required func function Validate/Check user input data, failure = retry, success = continue. required Returns: Type Description str The text input received from the user. create_torrent () Create new torrent file interactively. edit_action () Edit the editable values of the torrent meta file. get_input ( * args ) Determine appropriate input function to call. Parameters: Name Type Description Default *args tuple Arbitrary number of args to pass to next function () Returns: Type Description str The results of the function call. recheck_torrent () Check torrent download completed percentage. select_action () Operate TorrentFile program interactively through terminal. showcenter ( txt ) Print text to screen in the center position of the terminal. Parameters: Name Type Description Default txt str the preformated message to send to stdout. required showtext ( txt ) Print contents of txt to screen. Parameters: Name Type Description Default txt str text to print to terminal. required mixins Collection of classes that can be used as Mixins with other base classes. Classes such as TorrentFile, TorrentFilev2, and all Hasher classes can use the progress bar mixin. And any class is eligible to use the callback mixin. CbMixin Mixin class to set a callback during hashing procedure. set_callback ( func ) classmethod Assign a callback to the Hashing class. Parameters: Name Type Description Default func function the callback function required ProgMixin Progress bar mixin class. Displays progress of hashing individual files, usefull when hashing really big files. Methods prog_start prog_update prog_close is_active () Test to see if there is an active progress bar for object. Returns: Name Type Description bool True if there is, otherwise False. prog_close () Finalize the last bits of progress bar. Increment the terminal by one line leaving the progress bar in place, and deleting the progress bar object to clear a space for the next one. prog_start ( total , path , length = 50 , unit = None ) Generate a new progress bar for the given file path. Parameters: Name Type Description Default total int the total amount of units accumulating towards. required path str path to file being hashed. required length int the number of characters of the actual progress bar. 50 unit str the text representation of the value being measured. None prog_update ( val ) Update progress bar with given amount of progress. Parameters: Name Type Description Default val int the number of bytes count the progress bar should increase. required ProgressBar Holds the state and details of the terminal progress bars. Parameters: Name Type Description Default total int the total amount to be accumulated. required title str the subject of the progress tracker required length int the width of the progress bar required unit str the text representation incremented required __init__ ( total , title , length , unit , start ) Construct the progress bar object and store state of it's properties. increment ( value ) Increase the state of the progress bar value. Parameters: Name Type Description Default value int the amount to increment the state by. required pbar () Return the size of the filled portion of the progress bar. Returns: Name Type Description str the progress bar characters waiting ( msg , flag , timeout = 180 ) Show loading message while thread completes processing. Parameters: Name Type Description Default msg str Message string printed before the progress bar required flag list Once flag is filled exit loop required timeout int max amount of time to run the function. 180 rebuild Clases and functions for the rebuild or reassemble subcommand. Re-assemble a torrent into the propper directory structure as indicated by a torrent meta file, and validate the contents of each file allong the way. Displays a progress bar for each torrent. Assembler Does most of the work in attempting the structure of torrentfiles. Requires three paths as arguments. - torrent metafile or directory containing multiple meta files - directory containing the contents of meta file - directory where torrents will be re-assembled __init__ ( metafile , contents , dest ) Construct the assembler object. Takes two paths as parameters, - file or directory containing 1 or more torrent meta files - path to where the contents are belived to be located. Parameters: Name Type Description Default metafile str path to torrent metafile or directory containing torrent metafiles. required contents str path to content or directory containing content that belongs to torrentfile. required dest str path to the directory where rebuild will take place. required _compare_files ( val ) Compare all files with given filename. Compare and find which files with the same filename matches the length of the given files length and copy the file to the destination directory including it's relative file structure. Parameters: Name Type Description Default val dict Details about a particular file listed in torrent metadata. required _get_metafiles ( metafile ) staticmethod Collect all .torrent meta files from give directory or file. Parameters: Name Type Description Default metafile str path to a torrent meta file or directory containing torrent meta files. required _traverse_contents ( path ) Traverse the contents directory. Recursively walk the directory collecting file names and sizes for comparing to contents of torrent file. Parameters: Name Type Description Default path PathLike The current path being traversed. required rebuild () Build the torrent file structure from contents of directory. Traverse contents dir and compare discovered files with files listed in torrent metadata and copy the matches to the destination directory respecting folder structures along the way. Metadata Class containing the metadata contents of a torrent file. __init__ ( path ) Construct metadata object for torrent info. Parameters: Name Type Description Default path str path to the .torrent file. required _parse_tree ( tree , partials ) Parse the file tree dictionary of the torrent metafile. Parameters: Name Type Description Default tree dict the dictionary representation of a file tree. required partials list list of paths leading up to the current key value. required extract () Decode and extract information for the .torrent file. recheck Module container Checker Class. The CheckerClass takes a torrentfile and tha path to it's contents. It will then iterate through every file and directory contained and compare their data to values contained within the torrent file. Completion percentages will be printed to screen for each file and at the end for the torrentfile as a whole. Checker Bases: ProgMixin Check a given file or directory to see if it matches a torrentfile. Public constructor for Checker class instance. Parameters: Name Type Description Default metafile str Path to \".torrent\" file. required path str Path where the content is located in filesystem. required Example >> metafile = \"/path/to/torrentfile/content_file_or_dir.torrent\" >> location = \"/path/to/location\" >> os.path.exists(\"/path/to/location/content_file_or_dir\") Out: True >> checker = Checker(metafile, location) __init__ ( metafile , path ) Validate data against hashes contained in .torrent file. Parameters: Name Type Description Default metafile str path to .torrent file required path str path to content or contents parent directory. required check_paths () Gather all file paths described in the torrent file. find_root ( path ) Check path for torrent content. The path can be a relative or absolute filesystem path. In the case where the content is a single file, the path may point directly to the the file, or it may point to the parent directory. If content points to a directory. The directory will be checked to see if it matches the torrent's name, if not the directories contents will be searched. The returned value will be the absolute path that matches the torrent's name. Parameters: Name Type Description Default path str root path to torrent content required Returns: Type Description str root path to content iter_hashes () Produce results of comparing torrent contents piece by piece. Yields: Name Type Description chunck bytes hash of data found on disk piece bytes hash of data when complete and correct path str path to file being hashed size int length of bytes hashed for piece log_msg ( * args , level = logging . INFO ) Log message msg to logger and send msg to callback hook. Parameters: Name Type Description Default *args dict formatting args for log message () level int Log level for this message; default= logging.INFO logging.INFO piece_checker () Check individual pieces of the torrent. Returns: Type Description HashChecker | FeedChecker Individual piece hasher. register_callback ( hook ) classmethod Register hooks from 3rd party programs to access generated info. Parameters: Name Type Description Default hook function callback function for the logging feature. required results () Generate result percentage and store for future calls. walk_file_tree ( tree , partials ) Traverse File Tree dictionary to get file details. Extract full pathnames, length, root hash, and layer hashes for each file included in the .torrent's file tree. Parameters: Name Type Description Default tree dict File Tree dict extracted from torrent file. required partials list list of intermediate pathnames. required FeedChecker Bases: ProgMixin Validates torrent content. Seemlesly validate torrent file contents by comparing hashes in metafile against data on disk. Parameters: Name Type Description Default checker object the checker class instance. required __init__ ( checker ) Generate hashes of piece length data from filelist contents. __iter__ () Assign iterator and return self. __next__ () Yield back result of comparison. _gen_padding ( partial , length , read = 0 ) Create padded pieces where file sizes do not match. Parameters: Name Type Description Default partial bytes any remaining data from last file processed. required length int size of space that needs padding required read int portion of length already padded 0 Yields: Type Description bytes A piece length sized block of zeros. extract ( path , partial ) Split file paths contents into blocks of data for hash pieces. Parameters: Name Type Description Default path str path to content. required partial bytes any remaining content from last file. required Returns: Type Description bytearray Hash digest for block of .torrent contents. iter_pieces () Iterate through, and hash pieces of torrent contents. Yields: Name Type Description piece bytes hash digest for block of torrent data. HashChecker Bases: ProgMixin Iterate through contents of meta data and verify with file contents. Parameters: Name Type Description Default checker Checker the checker instance that maintains variables. required Padder Padding class to generate padding hashes wherever needed. Parameters: Name Type Description Default length the total size of the mock file generating padding for. required piece_length int the block size that each hash represents. required __init__ ( length , piece_length ) Construct padding class to Mock missing or incomplete files. Parameters: Name Type Description Default length int size of the file required piece_length int the piece length for each iteration. required __iter__ () Return self to correctly implement iterator type. __next__ () Iterate through seemingly endless sha256 hashes of zeros. Returns: Name Type Description tuple bytes returns the padding Raises: Type Description StopIteration __init__ ( checker ) Construct a HybridChecker instance. __iter__ () Assign iterator and return self. __next__ () Provide the result of comparison. advance () Increment the number of pieces processed for the current file. Returns: Type Description tuple the piece and size next_file () Remove all references to processed files and prepare for the next. Returns: Type Description bool if there is a next file found process_current () Gather necessary information to compare to metafile details. Returns: Type Description tuple a tuple containing the layer, piece, current path and size Raises: Type Description StopIteration torrent Classes and procedures pertaining to the creation of torrent meta files. Classes TorrentFile construct .torrent file. TorrentFileV2 construct .torrent v2 files using provided data. MetaFile base class for all MetaFile classes. Constants BLOCK_SIZE : int size of leaf hashes for merkle tree. HASH_SIZE : int Length of a sha256 hash. Bittorrent V2 From Bittorrent.org Documentation pages. Implementation details for Bittorrent Protocol v2. Note All strings in a .torrent file that contain text must be UTF-8 encoded. Meta Version 2 Dictionary: \"announce\": The URL of the tracker. \"info\": This maps to a dictionary, with keys described below. \"name\": A display name for the torrent. It is purely advisory. \"piece length\": The number of bytes that each logical piece in the peer protocol refers to. I.e. it sets the granularity of piece, request, bitfield and have messages. It must be a power of two and at least 6KiB. \"meta version\": An integer value, set to 2 to indicate compatibility with the current revision of this specification. Version 1 is not assigned to avoid confusion with BEP3. Future revisions will only increment this issue to indicate an incompatible change has been made, for example that hash algorithms were changed due to newly discovered vulnerabilities. Lementations must check this field first and indicate that a torrent is of a newer version than they can handle before performing other idations which may result in more general messages about invalid files. Files are mapped into this piece address space so that each non-empty \"file tree\": A tree of dictionaries where dictionary keys represent UTF-8 encoded path elements. Entries with zero-length keys describe the properties of the composed path at that point. 'UTF-8 encoded' context only means that if the native encoding is known at creation time it must be converted to UTF-8. Keys may contain invalid UTF-8 sequences or characters and names that are reserved on specific filesystems. Implementations must be prepared to sanitize them. On platforms path components exactly matching '.' and '..' must be sanitized since they could lead to directory traversal attacks and conflicting path descriptions. On platforms that require UTF-8 path components this sanitizing step must happen after normalizing overlong UTF-8 encodings. File is aligned to a piece boundary and occurs in same order as the file tree. The last piece of each file may be shorter than the specified piece length, resulting in an alignment gap. \"length\": Length of the file in bytes. Presence of this field indicates that the dictionary describes a file, not a directory. Which means it must not have any sibling entries. \"pieces root\": For non-empty files this is the the root hash of a merkle tree with a branching factor of 2, constructed from 16KiB blocks of the file. The last block may be shorter than 16KiB. The remaining leaf hashes beyond the end of the file required to construct upper layers of the merkle tree are set to zero. As of meta version 2 SHA2-256 is used as digest function for the merkle tree. The hash is stored in its binary form, not as human-readable string. \"piece layers\": A dictionary of strings. For each file in the file tree that is larger than the piece size it contains one string value. The keys are the merkle roots while the values consist of concatenated hashes of one layer within that merkle tree. The layer is chosen so that one hash covers piece length bytes. For example if the piece size is 16KiB then the leaf hashes are used. If a piece size of 128KiB is used then 3rd layer up from the leaf hashes is used. Layer hashes which exclusively cover data beyond the end of file, i.e. are only needed to balance the tree, are omitted. All hashes are stored in their binary format. A torrent is not valid if this field is absent, the contained hashes do not match the merkle roots or are not from the correct layer. Important The file tree root dictionary itself must not be a file, i.e. it must not contain a zero-length key with a dictionary containing a length key. Bittorrent V1 v1 meta-dictionary announce: The URL of the tracker. info: This maps to a dictionary, with keys described below. name : maps to a UTF-8 encoded string which is the suggested name to save the file (or directory) as. It is purely advisory. piece length : maps to the number of bytes in each piece the file is split into. For the purposes of transfer, files are split into fixed-size pieces which are all the same length except for possibly the last one which may be truncated. piece length : is almost always a power of two, most commonly 2^18 = 256 K pieces : maps to a string whose length is a multiple of 20. It is to be subdivided into strings of length 20, each of which is the SHA1 hash of the piece at the corresponding index. length : In the single file case, maps to the length of the file in bytes. files : If present then the download represents a single file, otherwise it represents a set of files which go in a directory structure. For the purposes of the other keys, the multi-file case is treated as only having a single file by concatenating the files in the order they appear in the files list. The files list is the value files maps to, and is a list of dictionaries containing the following keys: path : A list of UTF-8 encoded strings corresponding to subdirectory names, the last of which is the actual file name length : Maps to the length of the file in bytes. length : Only present if the content is a single file. Maps to the length of the file in bytes. Note In the single file case, the name key is the name of a file, in the muliple file case, it's the name of a directory. MetaFile Base Class for all TorrentFile classes. Parameters: Name Type Description Default path str target path to torrent content. Default: None None announce str One or more tracker URL's. Default: None None comment str A comment. Default: None None piece_length int Size of torrent pieces. Default: None None private bool For private trackers. Default: None False outfile str target path to write .torrent file. Default: None None source str Private tracker source. Default: None None progress str level of progress bar displayed Default: \"1\" 1 cwd bool If True change default save location to current directory False httpseeds list one or more web addresses where torrent content can be found. None url_list list one or more web addressess where torrent content exists. None content str alias for 'path' arg. None meta_version int indicates which Bittorrent protocol to use for hashing content None __init__ ( path = None , announce = None , comment = None , piece_length = None , private = False , outfile = None , source = None , progress = 1 , cwd = False , httpseeds = None , url_list = None , content = None , meta_version = None , ** _ ) Construct MetaFile superclass and assign local attributes. assemble () Overload in subclasses. Raises: Type Description Exception NotImplementedError set_callback ( func ) classmethod Assign a callback function for the Hashing class to call for each hash. Parameters: Name Type Description Default func function The callback function which accepts a single paramter. required sort_meta () Sort the info and meta dictionaries. write ( outfile = None ) Write meta information to .torrent file. Parameters: Name Type Description Default outfile str Destination path for .torrent file. default=None None Returns: Name Type Description outfile str Where the .torrent file was writen. meta dict .torrent meta information. TorrentAssembler Bases: MetaFile Assembler class for Bittorrent version 2 and hybrid meta files. This differs from the TorrentFileV2 and TorrentFileHybrid, because it can be used as an iterator and works for both versions. Parameters: Name Type Description Default **kwargs dict Keyword arguments for torrent options. {} __init__ ( ** kwargs ) Create Bittorrent v1 v2 hybrid metafiles. _traverse ( path ) Build meta dictionary while walking directory. Parameters: Name Type Description Default path str Path to target file. required assemble () Assemble the parts of the torrentfile into meta dictionary. TorrentFile Bases: MetaFile , ProgMixin Class for creating Bittorrent meta files. Construct Torrentfile class instance object. Parameters: Name Type Description Default **kwargs dict Dictionary containing torrent file options. {} __init__ ( ** kwargs ) Construct TorrentFile instance with given keyword args. Parameters: Name Type Description Default **kwargs dict dictionary of keyword args passed to superclass. {} assemble () Assemble components of torrent metafile. Returns: Type Description dict metadata dictionary for torrent file TorrentFileHybrid Bases: MetaFile , ProgMixin Construct the Hybrid torrent meta file with provided parameters. DEPRECATED Parameters: Name Type Description Default **kwargs dict Keyword arguments for torrent options. {} __init__ ( ** kwargs ) Create Bittorrent v1 v2 hybrid metafiles. _traverse ( path ) Build meta dictionary while walking directory. DEPRECATED Parameters: Name Type Description Default path str Path to target file. required assemble () Assemble the parts of the torrentfile into meta dictionary. DEPRECATED TorrentFileV2 Bases: MetaFile , ProgMixin Class for creating Bittorrent meta v2 files. DEPRECATED Parameters: Name Type Description Default **kwargs dict Keyword arguments for torrent file options. {} __init__ ( ** kwargs ) Construct TorrentFileV2 Class instance from given parameters. DEPRECATED Parameters: Name Type Description Default **kwargs dict keywword arguments to pass to superclass. {} _traverse ( path ) Walk directory tree. DEPRECATED Parameters: Name Type Description Default path str Path to file or directory. required assemble () Assemble then return the meta dictionary for encoding. DEPRECATED Returns: Name Type Description meta dict Metainformation about the torrent. utils Utility functions and classes used throughout package. Functions: get_piece_length: calculate ideal piece length for torrent file. sortfiles: traverse directory in sorted order yielding paths encountered. path_size: Sum the sizes of each file in path. get_file_list: Return list of all files contained in directory. path_stat: Get ideal piece length, total size, and file list for directory. path_piece_length: Get ideal piece length based on size of directory. Classes: MissingPathError: Custom exception raised when no path was provided to CLI. PieceLengthValueError: Custom exception raised when incorrect input value used for piece length field. Memo Memoice chache object. Parameters: Name Type Description Default func function The function that is being memoized. required __call__ ( path ) Invoke each time memo function is called. Parameters: Name Type Description Default path str The relative or absolute path being used as key in cache dict. required Returns: Name Type Description Any The results of calling the function with path. __init__ ( func ) Construct for memoization. MissingPathError Bases: Exception Path parameter is required to specify target content. Creating a .torrent file with no contents seems rather silly. Parameters: Name Type Description Default message str Message for user (optional). None __init__ ( message = None ) Raise when creating a meta file without specifying target content. The message argument is a message to pass to Exception base class. PieceLengthValueError Bases: Exception Piece Length parameter must equal a perfect power of 2. Parameters: Name Type Description Default message str Message for user (optional). None __init__ ( message = None ) Raise when creating a meta file with incorrect piece length value. The message argument is a message to pass to Exception base class. _filelist_total ( path ) Search directory tree for files. Parameters: Name Type Description Default path str Path to file or directory base required Returns: Type Description int Sum of all filesizes in filelist. list All file paths within directory tree. filelist_total ( pathstring ) Perform error checking and format conversion to os.PathLike. Parameters: Name Type Description Default pathstring str An existing filesystem path. required Returns: Type Description os . PathLike Input path converted to bytes format. Raises: Type Description MissingPathError File could not be found. get_file_list ( path ) Return a sorted list of file paths contained in directory. Parameters: Name Type Description Default path str target file or directory. required Returns: Type Description list sorted list of file paths. get_piece_length ( size ) Calculate the ideal piece length for bittorrent data. Parameters: Name Type Description Default size int Total bits of all files incluided in .torrent file. required Returns: Type Description int Ideal piece length. humanize_bytes ( amount ) Convert integer into human readable memory sized denomination. Parameters: Name Type Description Default amount int total number of bytes. required Returns: Type Description str human readable representation of the given amount of bytes. next_power_2 ( value ) Calculate the next perfect power of 2 equal to or greater than value. Parameters: Name Type Description Default value int integer value that is less than some perfect power of 2. required Returns: Type Description int The next power of 2 greater than value, or value if already power of 2. normalize_piece_length ( piece_length ) Verify input piece_length is valid and convert accordingly. Parameters: Name Type Description Default piece_length int | str The piece length provided by user. required Returns: Type Description int normalized piece length. Raises: Type Description PieceLengthValueError : If piece length is improper value. path_piece_length ( path ) Calculate piece length for input path and contents. Parameters: Name Type Description Default path str The absolute path to directory and contents. required Returns: Type Description int The size of pieces of torrent content. path_size ( path ) Return the total size of all files in path recursively. Parameters: Name Type Description Default path str path to target file or directory. required Returns: Type Description int total size of files. path_stat ( path ) Calculate directory statistics. Parameters: Name Type Description Default path str The path to start calculating from. required Returns: Type Description list List of all files contained in Directory int Total sum of bytes from all contents of dir int The size of pieces of the torrent contents. version Holds the release version number. Command Line Interface for TorrentFile project. This module provides the primary command line argument parser for the torrentfile package. The main_script function is automatically invoked when called from command line, and parses accompanying arguments. Functions: main_script: process command line arguments and run program. activate_logger: turns on debug mode and logging facility. TorrentFileHelpFormatter Bases: HelpFormatter Formatting class for help tips provided by the CLI. Subclasses Argparse.HelpFormatter. __init__ ( prog , width = 40 , max_help_positions = 30 ) Construct HelpFormat class for usage output. Parameters: Name Type Description Default prog str Name of the program. required width int Max width of help message output. 40 max_help_positions int max length until line wrap. 30 _format_text ( text ) Format text for cli usage messages. Parameters: Name Type Description Default text str Pre-formatted text. required Returns: Type Description str Formatted text from input. _join_parts ( part_strings ) Combine different sections of the help message. Parameters: Name Type Description Default part_strings list List of argument help messages and headers. required Returns: Type Description str Fully formatted help message for CLI. _split_lines ( text , _ ) Split multiline help messages and remove indentation. Parameters: Name Type Description Default text str text that needs to be split required _ int max width for line. required format_headers ( parts ) staticmethod Format help message section headers. Parameters: Name Type Description Default parts list List of individual lines for help message. required Returns: Type Description list Input list with formatted section headers. activate_logger () Activate the builtin logging mechanism when passed debug flag from CLI. execute ( args = None ) Initialize Command Line Interface for torrentfile. Parameters: Name Type Description Default args list Commandline arguments. default=None None Returns: Type Description list Depends on what the command line args were. main () Initiate main function for CLI script. Edit torrent module. Provides a facility by which certain properties of a torrent meta file can be edited by the user. The various command line arguments indicate which fields should be edited, and what the new value should be. Depending on what fields are chosen to edit, this command can trigger a new info hash which means the torrent will no longer be able to participate in the same swarm as the original unedited torrent. Keywords private comment source trackers web-seeds edit_torrent ( metafile , args ) Edit the properties and values in a torrent meta file. Parameters: Name Type Description Default metafile str path to the torrent meta file. required args dict key value pairs of the properties to be edited. required Returns: Type Description dict The edited and nested Meta and info dictionaries. filter_empty ( args , meta , info ) Remove dictionary keys with empty values. Parameters: Name Type Description Default args dict Editable metafile properties from user. required meta dict Metafile data dictionary. required info dict Metafile info dictionary. required Piece/File Hashers for Bittorrent meta file contents. FileHasher Bases: CbMixin , ProgMixin Calculate root and piece hashes for creating hybrid torrent file. Create merkle tree layers from sha256 hashed 16KiB blocks of contents. With a branching factor of 2, merge layer hashes until blocks equal piece_length bytes for the piece layer, and then the root hash. Parameters: Name Type Description Default path str path to target file. required piece_length int piece length for data chunks. required progress int default = None True __init__ ( path , piece_length , progress = True , hybrid = False ) Construct Hasher class instances for each file in torrent. __iter__ () Return self : needed to implement iterator implementation. __next__ () Calculate layer hashes for contents of file. Returns: Type Description bytes The layer merckle root hash. _calculate_root () Calculate the root hash for opened file. _pad_remaining ( block_count ) Generate Hash sized, 0 filled bytes for padding. Parameters: Name Type Description Default block_count int current total number of blocks collected. required Returns: Name Type Description padding bytes Padding to fill remaining portion of tree. Hasher Bases: CbMixin , ProgMixin Piece hasher for Bittorrent V1 files. Takes a sorted list of all file paths, calculates sha1 hash for fixed size pieces of file data from each file seemlessly until the last piece which may be smaller than others. Parameters: Name Type Description Default paths list List of files. required piece_length int Size of chuncks to split the data into. required progress int default = None True __init__ ( paths , piece_length , progress = True ) Generate hashes of piece length data from filelist contents. __iter__ () Iterate through feed pieces. Returns: Name Type Description self iterator Iterator for leaves/hash pieces. __next__ () Generate piece-length pieces of data from input file list. Returns: Type Description bytes SHA1 hash of the piece extracted. _handle_partial ( arr ) Define the handling partial pieces that span 2 or more files. Parameters: Name Type Description Default arr bytearray Incomplete piece containing partial data required Returns: Name Type Description digest bytearray SHA1 digest of the complete piece. next_file () Seemlessly transition to next file in file list. Returns: Name Type Description bool bool True if there is a next file otherwise False. HasherHybrid Bases: CbMixin , ProgMixin Calculate root and piece hashes for creating hybrid torrent file. DEPRECATED Create merkle tree layers from sha256 hashed 16KiB blocks of contents. With a branching factor of 2, merge layer hashes until blocks equal piece_length bytes for the piece layer, and then the root hash. Parameters: Name Type Description Default path str path to target file. required piece_length int piece length for data chunks. required progress int default = None True __init__ ( path , piece_length , progress = True ) Construct Hasher class instances for each file in torrent. DEPRECATED _calculate_root () Calculate the root hash for opened file. DEPRECATED _pad_remaining ( block_count ) Generate Hash sized, 0 filled bytes for padding. DEPRECATED Parameters: Name Type Description Default block_count int current total number of blocks collected. required Returns: Name Type Description padding bytes Padding to fill remaining portion of tree. process_file ( data ) Calculate layer hashes for contents of file. DEPRECATED Parameters: Name Type Description Default data BytesIO File opened in read mode. required HasherV2 Bases: CbMixin , ProgMixin Calculate the root hash and piece layers for file contents. DEPRECATED Iterates over 16KiB blocks of data from given file, hashes the data, then creates a hash tree from the individual block hashes until size of hashed data equals the piece-length. Then continues the hash tree until root hash is calculated. Parameters: Name Type Description Default path str Path to file. required piece_length int Size of layer hashes pieces. required progress int default = None True __init__ ( path , piece_length , progress = True ) Calculate and store hash information for specific file. DEPRECATED _calculate_root () Calculate root hash for the target file. DEPRECATED process_file ( fd ) Calculate hashes over 16KiB chuncks of file content. DEPRECATED Parameters: Name Type Description Default fd TextIOWrapper Opened file in read mode. required merkle_root ( blocks ) Calculate the merkle root for a seq of sha256 hash digests. Parameters: Name Type Description Default blocks list a sequence of sha256 layer hashes. required Returns: Type Description bytes the sha256 root hash of the merkle tree. Module contains the procedures used for Interactive Mode. InteractiveCreator Class namespace for interactive program options. __init__ () Initialize interactive meta file creator dialog. get_props () Gather details for torrentfile from user. InteractiveEditor Interactive dialog class for torrent editing. __init__ ( metafile ) Initialize the Interactive torrent editor guide. Parameters: Name Type Description Default metafile str user input string identifying the path to a torrent meta file. required edit_props () Loop continuosly for edits until user signals DONE. sanatize_response ( key , response ) Convert the input data into a form recognizable by the program. Parameters: Name Type Description Default key str name of the property and attribute being eddited. required response str User input value the property is being edited to. required show_current () Display the current met file information to screen. _get_input ( txt ) Gather information needed from user. Parameters: Name Type Description Default txt str The message usually containing instructions for the user. required Returns: Type Description str The text input received from the user. _get_input_loop ( txt , func ) Gather information needed from user. Parameters: Name Type Description Default txt str The message usually containing instructions for the user. required func function Validate/Check user input data, failure = retry, success = continue. required Returns: Type Description str The text input received from the user. create_torrent () Create new torrent file interactively. edit_action () Edit the editable values of the torrent meta file. get_input ( * args ) Determine appropriate input function to call. Parameters: Name Type Description Default *args tuple Arbitrary number of args to pass to next function () Returns: Type Description str The results of the function call. recheck_torrent () Check torrent download completed percentage. select_action () Operate TorrentFile program interactively through terminal. showcenter ( txt ) Print text to screen in the center position of the terminal. Parameters: Name Type Description Default txt str the preformated message to send to stdout. required showtext ( txt ) Print contents of txt to screen. Parameters: Name Type Description Default txt str text to print to terminal. required Module container Checker Class. The CheckerClass takes a torrentfile and tha path to it's contents. It will then iterate through every file and directory contained and compare their data to values contained within the torrent file. Completion percentages will be printed to screen for each file and at the end for the torrentfile as a whole. Checker Bases: ProgMixin Check a given file or directory to see if it matches a torrentfile. Public constructor for Checker class instance. Parameters: Name Type Description Default metafile str Path to \".torrent\" file. required path str Path where the content is located in filesystem. required Example >> metafile = \"/path/to/torrentfile/content_file_or_dir.torrent\" >> location = \"/path/to/location\" >> os.path.exists(\"/path/to/location/content_file_or_dir\") Out: True >> checker = Checker(metafile, location) __init__ ( metafile , path ) Validate data against hashes contained in .torrent file. Parameters: Name Type Description Default metafile str path to .torrent file required path str path to content or contents parent directory. required check_paths () Gather all file paths described in the torrent file. find_root ( path ) Check path for torrent content. The path can be a relative or absolute filesystem path. In the case where the content is a single file, the path may point directly to the the file, or it may point to the parent directory. If content points to a directory. The directory will be checked to see if it matches the torrent's name, if not the directories contents will be searched. The returned value will be the absolute path that matches the torrent's name. Parameters: Name Type Description Default path str root path to torrent content required Returns: Type Description str root path to content iter_hashes () Produce results of comparing torrent contents piece by piece. Yields: Name Type Description chunck bytes hash of data found on disk piece bytes hash of data when complete and correct path str path to file being hashed size int length of bytes hashed for piece log_msg ( * args , level = logging . INFO ) Log message msg to logger and send msg to callback hook. Parameters: Name Type Description Default *args dict formatting args for log message () level int Log level for this message; default= logging.INFO logging.INFO piece_checker () Check individual pieces of the torrent. Returns: Type Description HashChecker | FeedChecker Individual piece hasher. register_callback ( hook ) classmethod Register hooks from 3rd party programs to access generated info. Parameters: Name Type Description Default hook function callback function for the logging feature. required results () Generate result percentage and store for future calls. walk_file_tree ( tree , partials ) Traverse File Tree dictionary to get file details. Extract full pathnames, length, root hash, and layer hashes for each file included in the .torrent's file tree. Parameters: Name Type Description Default tree dict File Tree dict extracted from torrent file. required partials list list of intermediate pathnames. required FeedChecker Bases: ProgMixin Validates torrent content. Seemlesly validate torrent file contents by comparing hashes in metafile against data on disk. Parameters: Name Type Description Default checker object the checker class instance. required __init__ ( checker ) Generate hashes of piece length data from filelist contents. __iter__ () Assign iterator and return self. __next__ () Yield back result of comparison. _gen_padding ( partial , length , read = 0 ) Create padded pieces where file sizes do not match. Parameters: Name Type Description Default partial bytes any remaining data from last file processed. required length int size of space that needs padding required read int portion of length already padded 0 Yields: Type Description bytes A piece length sized block of zeros. extract ( path , partial ) Split file paths contents into blocks of data for hash pieces. Parameters: Name Type Description Default path str path to content. required partial bytes any remaining content from last file. required Returns: Type Description bytearray Hash digest for block of .torrent contents. iter_pieces () Iterate through, and hash pieces of torrent contents. Yields: Name Type Description piece bytes hash digest for block of torrent data. HashChecker Bases: ProgMixin Iterate through contents of meta data and verify with file contents. Parameters: Name Type Description Default checker Checker the checker instance that maintains variables. required Padder Padding class to generate padding hashes wherever needed. Parameters: Name Type Description Default length the total size of the mock file generating padding for. required piece_length int the block size that each hash represents. required __init__ ( length , piece_length ) Construct padding class to Mock missing or incomplete files. Parameters: Name Type Description Default length int size of the file required piece_length int the piece length for each iteration. required __iter__ () Return self to correctly implement iterator type. __next__ () Iterate through seemingly endless sha256 hashes of zeros. Returns: Name Type Description tuple bytes returns the padding Raises: Type Description StopIteration __init__ ( checker ) Construct a HybridChecker instance. __iter__ () Assign iterator and return self. __next__ () Provide the result of comparison. advance () Increment the number of pieces processed for the current file. Returns: Type Description tuple the piece and size next_file () Remove all references to processed files and prepare for the next. Returns: Type Description bool if there is a next file found process_current () Gather necessary information to compare to metafile details. Returns: Type Description tuple a tuple containing the layer, piece, current path and size Raises: Type Description StopIteration Clases and functions for the rebuild or reassemble subcommand. Re-assemble a torrent into the propper directory structure as indicated by a torrent meta file, and validate the contents of each file allong the way. Displays a progress bar for each torrent. Assembler Does most of the work in attempting the structure of torrentfiles. Requires three paths as arguments. - torrent metafile or directory containing multiple meta files - directory containing the contents of meta file - directory where torrents will be re-assembled __init__ ( metafile , contents , dest ) Construct the assembler object. Takes two paths as parameters, - file or directory containing 1 or more torrent meta files - path to where the contents are belived to be located. Parameters: Name Type Description Default metafile str path to torrent metafile or directory containing torrent metafiles. required contents str path to content or directory containing content that belongs to torrentfile. required dest str path to the directory where rebuild will take place. required _compare_files ( val ) Compare all files with given filename. Compare and find which files with the same filename matches the length of the given files length and copy the file to the destination directory including it's relative file structure. Parameters: Name Type Description Default val dict Details about a particular file listed in torrent metadata. required _get_metafiles ( metafile ) staticmethod Collect all .torrent meta files from give directory or file. Parameters: Name Type Description Default metafile str path to a torrent meta file or directory containing torrent meta files. required _traverse_contents ( path ) Traverse the contents directory. Recursively walk the directory collecting file names and sizes for comparing to contents of torrent file. Parameters: Name Type Description Default path PathLike The current path being traversed. required rebuild () Build the torrent file structure from contents of directory. Traverse contents dir and compare discovered files with files listed in torrent metadata and copy the matches to the destination directory respecting folder structures along the way. Metadata Class containing the metadata contents of a torrent file. __init__ ( path ) Construct metadata object for torrent info. Parameters: Name Type Description Default path str path to the .torrent file. required _parse_tree ( tree , partials ) Parse the file tree dictionary of the torrent metafile. Parameters: Name Type Description Default tree dict the dictionary representation of a file tree. required partials list list of paths leading up to the current key value. required extract () Decode and extract information for the .torrent file. Classes and procedures pertaining to the creation of torrent meta files. Classes TorrentFile construct .torrent file. TorrentFileV2 construct .torrent v2 files using provided data. MetaFile base class for all MetaFile classes. Constants BLOCK_SIZE : int size of leaf hashes for merkle tree. HASH_SIZE : int Length of a sha256 hash. Bittorrent V2 From Bittorrent.org Documentation pages. Implementation details for Bittorrent Protocol v2. Note All strings in a .torrent file that contain text must be UTF-8 encoded. Meta Version 2 Dictionary: \"announce\": The URL of the tracker. \"info\": This maps to a dictionary, with keys described below. \"name\": A display name for the torrent. It is purely advisory. \"piece length\": The number of bytes that each logical piece in the peer protocol refers to. I.e. it sets the granularity of piece, request, bitfield and have messages. It must be a power of two and at least 6KiB. \"meta version\": An integer value, set to 2 to indicate compatibility with the current revision of this specification. Version 1 is not assigned to avoid confusion with BEP3. Future revisions will only increment this issue to indicate an incompatible change has been made, for example that hash algorithms were changed due to newly discovered vulnerabilities. Lementations must check this field first and indicate that a torrent is of a newer version than they can handle before performing other idations which may result in more general messages about invalid files. Files are mapped into this piece address space so that each non-empty \"file tree\": A tree of dictionaries where dictionary keys represent UTF-8 encoded path elements. Entries with zero-length keys describe the properties of the composed path at that point. 'UTF-8 encoded' context only means that if the native encoding is known at creation time it must be converted to UTF-8. Keys may contain invalid UTF-8 sequences or characters and names that are reserved on specific filesystems. Implementations must be prepared to sanitize them. On platforms path components exactly matching '.' and '..' must be sanitized since they could lead to directory traversal attacks and conflicting path descriptions. On platforms that require UTF-8 path components this sanitizing step must happen after normalizing overlong UTF-8 encodings. File is aligned to a piece boundary and occurs in same order as the file tree. The last piece of each file may be shorter than the specified piece length, resulting in an alignment gap. \"length\": Length of the file in bytes. Presence of this field indicates that the dictionary describes a file, not a directory. Which means it must not have any sibling entries. \"pieces root\": For non-empty files this is the the root hash of a merkle tree with a branching factor of 2, constructed from 16KiB blocks of the file. The last block may be shorter than 16KiB. The remaining leaf hashes beyond the end of the file required to construct upper layers of the merkle tree are set to zero. As of meta version 2 SHA2-256 is used as digest function for the merkle tree. The hash is stored in its binary form, not as human-readable string. \"piece layers\": A dictionary of strings. For each file in the file tree that is larger than the piece size it contains one string value. The keys are the merkle roots while the values consist of concatenated hashes of one layer within that merkle tree. The layer is chosen so that one hash covers piece length bytes. For example if the piece size is 16KiB then the leaf hashes are used. If a piece size of 128KiB is used then 3rd layer up from the leaf hashes is used. Layer hashes which exclusively cover data beyond the end of file, i.e. are only needed to balance the tree, are omitted. All hashes are stored in their binary format. A torrent is not valid if this field is absent, the contained hashes do not match the merkle roots or are not from the correct layer. Important The file tree root dictionary itself must not be a file, i.e. it must not contain a zero-length key with a dictionary containing a length key. Bittorrent V1 v1 meta-dictionary announce: The URL of the tracker. info: This maps to a dictionary, with keys described below. name : maps to a UTF-8 encoded string which is the suggested name to save the file (or directory) as. It is purely advisory. piece length : maps to the number of bytes in each piece the file is split into. For the purposes of transfer, files are split into fixed-size pieces which are all the same length except for possibly the last one which may be truncated. piece length : is almost always a power of two, most commonly 2^18 = 256 K pieces : maps to a string whose length is a multiple of 20. It is to be subdivided into strings of length 20, each of which is the SHA1 hash of the piece at the corresponding index. length : In the single file case, maps to the length of the file in bytes. files : If present then the download represents a single file, otherwise it represents a set of files which go in a directory structure. For the purposes of the other keys, the multi-file case is treated as only having a single file by concatenating the files in the order they appear in the files list. The files list is the value files maps to, and is a list of dictionaries containing the following keys: path : A list of UTF-8 encoded strings corresponding to subdirectory names, the last of which is the actual file name length : Maps to the length of the file in bytes. length : Only present if the content is a single file. Maps to the length of the file in bytes. Note In the single file case, the name key is the name of a file, in the muliple file case, it's the name of a directory. MetaFile Base Class for all TorrentFile classes. Parameters: Name Type Description Default path str target path to torrent content. Default: None None announce str One or more tracker URL's. Default: None None comment str A comment. Default: None None piece_length int Size of torrent pieces. Default: None None private bool For private trackers. Default: None False outfile str target path to write .torrent file. Default: None None source str Private tracker source. Default: None None progress str level of progress bar displayed Default: \"1\" 1 cwd bool If True change default save location to current directory False httpseeds list one or more web addresses where torrent content can be found. None url_list list one or more web addressess where torrent content exists. None content str alias for 'path' arg. None meta_version int indicates which Bittorrent protocol to use for hashing content None __init__ ( path = None , announce = None , comment = None , piece_length = None , private = False , outfile = None , source = None , progress = 1 , cwd = False , httpseeds = None , url_list = None , content = None , meta_version = None , ** _ ) Construct MetaFile superclass and assign local attributes. assemble () Overload in subclasses. Raises: Type Description Exception NotImplementedError set_callback ( func ) classmethod Assign a callback function for the Hashing class to call for each hash. Parameters: Name Type Description Default func function The callback function which accepts a single paramter. required sort_meta () Sort the info and meta dictionaries. write ( outfile = None ) Write meta information to .torrent file. Parameters: Name Type Description Default outfile str Destination path for .torrent file. default=None None Returns: Name Type Description outfile str Where the .torrent file was writen. meta dict .torrent meta information. TorrentAssembler Bases: MetaFile Assembler class for Bittorrent version 2 and hybrid meta files. This differs from the TorrentFileV2 and TorrentFileHybrid, because it can be used as an iterator and works for both versions. Parameters: Name Type Description Default **kwargs dict Keyword arguments for torrent options. {} __init__ ( ** kwargs ) Create Bittorrent v1 v2 hybrid metafiles. _traverse ( path ) Build meta dictionary while walking directory. Parameters: Name Type Description Default path str Path to target file. required assemble () Assemble the parts of the torrentfile into meta dictionary. TorrentFile Bases: MetaFile , ProgMixin Class for creating Bittorrent meta files. Construct Torrentfile class instance object. Parameters: Name Type Description Default **kwargs dict Dictionary containing torrent file options. {} __init__ ( ** kwargs ) Construct TorrentFile instance with given keyword args. Parameters: Name Type Description Default **kwargs dict dictionary of keyword args passed to superclass. {} assemble () Assemble components of torrent metafile. Returns: Type Description dict metadata dictionary for torrent file TorrentFileHybrid Bases: MetaFile , ProgMixin Construct the Hybrid torrent meta file with provided parameters. DEPRECATED Parameters: Name Type Description Default **kwargs dict Keyword arguments for torrent options. {} __init__ ( ** kwargs ) Create Bittorrent v1 v2 hybrid metafiles. _traverse ( path ) Build meta dictionary while walking directory. DEPRECATED Parameters: Name Type Description Default path str Path to target file. required assemble () Assemble the parts of the torrentfile into meta dictionary. DEPRECATED TorrentFileV2 Bases: MetaFile , ProgMixin Class for creating Bittorrent meta v2 files. DEPRECATED Parameters: Name Type Description Default **kwargs dict Keyword arguments for torrent file options. {} __init__ ( ** kwargs ) Construct TorrentFileV2 Class instance from given parameters. DEPRECATED Parameters: Name Type Description Default **kwargs dict keywword arguments to pass to superclass. {} _traverse ( path ) Walk directory tree. DEPRECATED Parameters: Name Type Description Default path str Path to file or directory. required assemble () Assemble then return the meta dictionary for encoding. DEPRECATED Returns: Name Type Description meta dict Metainformation about the torrent. Utility functions and classes used throughout package. Functions: get_piece_length: calculate ideal piece length for torrent file. sortfiles: traverse directory in sorted order yielding paths encountered. path_size: Sum the sizes of each file in path. get_file_list: Return list of all files contained in directory. path_stat: Get ideal piece length, total size, and file list for directory. path_piece_length: Get ideal piece length based on size of directory. Classes: MissingPathError: Custom exception raised when no path was provided to CLI. PieceLengthValueError: Custom exception raised when incorrect input value used for piece length field. Memo Memoice chache object. Parameters: Name Type Description Default func function The function that is being memoized. required __call__ ( path ) Invoke each time memo function is called. Parameters: Name Type Description Default path str The relative or absolute path being used as key in cache dict. required Returns: Name Type Description Any The results of calling the function with path. __init__ ( func ) Construct for memoization. MissingPathError Bases: Exception Path parameter is required to specify target content. Creating a .torrent file with no contents seems rather silly. Parameters: Name Type Description Default message str Message for user (optional). None __init__ ( message = None ) Raise when creating a meta file without specifying target content. The message argument is a message to pass to Exception base class. PieceLengthValueError Bases: Exception Piece Length parameter must equal a perfect power of 2. Parameters: Name Type Description Default message str Message for user (optional). None __init__ ( message = None ) Raise when creating a meta file with incorrect piece length value. The message argument is a message to pass to Exception base class. _filelist_total ( path ) Search directory tree for files. Parameters: Name Type Description Default path str Path to file or directory base required Returns: Type Description int Sum of all filesizes in filelist. list All file paths within directory tree. filelist_total ( pathstring ) Perform error checking and format conversion to os.PathLike. Parameters: Name Type Description Default pathstring str An existing filesystem path. required Returns: Type Description os . PathLike Input path converted to bytes format. Raises: Type Description MissingPathError File could not be found. get_file_list ( path ) Return a sorted list of file paths contained in directory. Parameters: Name Type Description Default path str target file or directory. required Returns: Type Description list sorted list of file paths. get_piece_length ( size ) Calculate the ideal piece length for bittorrent data. Parameters: Name Type Description Default size int Total bits of all files incluided in .torrent file. required Returns: Type Description int Ideal piece length. humanize_bytes ( amount ) Convert integer into human readable memory sized denomination. Parameters: Name Type Description Default amount int total number of bytes. required Returns: Type Description str human readable representation of the given amount of bytes. next_power_2 ( value ) Calculate the next perfect power of 2 equal to or greater than value. Parameters: Name Type Description Default value int integer value that is less than some perfect power of 2. required Returns: Type Description int The next power of 2 greater than value, or value if already power of 2. normalize_piece_length ( piece_length ) Verify input piece_length is valid and convert accordingly. Parameters: Name Type Description Default piece_length int | str The piece length provided by user. required Returns: Type Description int normalized piece length. Raises: Type Description PieceLengthValueError : If piece length is improper value. path_piece_length ( path ) Calculate piece length for input path and contents. Parameters: Name Type Description Default path str The absolute path to directory and contents. required Returns: Type Description int The size of pieces of torrent content. path_size ( path ) Return the total size of all files in path recursively. Parameters: Name Type Description Default path str path to target file or directory. required Returns: Type Description int total size of files. path_stat ( path ) Calculate directory statistics. Parameters: Name Type Description Default path str The path to start calculating from. required Returns: Type Description list List of all files contained in Directory int Total sum of bytes from all contents of dir int The size of pieces of the torrent contents. Holds the release version number.","title":"API"},{"location":"source/#torrentfile_1","text":"","title":"TorrentFile"},{"location":"source/#api-and-source","text":"","title":"API and Source"},{"location":"source/#torrent-module","text":"module torrentfile. torrent Classes and procedures pertaining to the creation of torrent meta files.","title":"Torrent Module"},{"location":"source/#classes","text":"TorrentFile construct .torrent file. TorrentFileV2 construct .torrent v2 files using provided data. MetaFile base class for all MetaFile classes.","title":"Classes"},{"location":"source/#constants","text":"BLOCK_SIZE : int size of leaf hashes for merkle tree. HASH_SIZE : int Length of a sha256 hash.","title":"Constants"},{"location":"source/#bittorrent-v2","text":"From Bittorrent.org Documentation pages. Implementation details for Bittorrent Protocol v2. Note All strings in a .torrent file that contain text must be UTF-8 encoded.","title":"Bittorrent V2"},{"location":"source/#meta-version-2-dictionary","text":"\"announce\": The URL of the tracker. \"info\": This maps to a dictionary, with keys described below. \"name\": A display name for the torrent. It is purely advisory. \"piece length\": The number of bytes that each logical piece in the peer protocol refers to. I.e. it sets the granularity of piece, request, bitfield and have messages. It must be a power of two and at least 6KiB. \"meta version\": An integer value, set to 2 to indicate compatibility with the current revision of this specification. Version 1 is not assigned to avoid confusion with BEP3. Future revisions will only increment this issue to indicate an incompatible change has been made, for example that hash algorithms were changed due to newly discovered vulnerabilities. Lementations must check this field first and indicate that a torrent is of a newer version than they can handle before performing other idations which may result in more general messages about invalid files. Files are mapped into this piece address space so that each non-empty \"file tree\": A tree of dictionaries where dictionary keys represent UTF-8 encoded path elements. Entries with zero-length keys describe the properties of the composed path at that point. 'UTF-8 encoded' context only means that if the native encoding is known at creation time it must be converted to UTF-8. Keys may contain invalid UTF-8 sequences or characters and names that are reserved on specific filesystems. Implementations must be prepared to sanitize them. On platforms path components exactly matching '.' and '..' must be sanitized since they could lead to directory traversal attacks and conflicting path descriptions. On platforms that require UTF-8 path components this sanitizing step must happen after normalizing overlong UTF-8 encodings. File is aligned to a piece boundary and occurs in same order as the file tree. The last piece of each file may be shorter than the specified piece length, resulting in an alignment gap. \"length\": Length of the file in bytes. Presence of this field indicates that the dictionary describes a file, not a directory. Which means it must not have any sibling entries. \"pieces root\": For non-empty files this is the the root hash of a merkle tree with a branching factor of 2, constructed from 16KiB blocks of the file. The last block may be shorter than 16KiB. The remaining leaf hashes beyond the end of the file required to construct upper layers of the merkle tree are set to zero. As of meta version 2 SHA2-256 is used as digest function for the merkle tree. The hash is stored in its binary form, not as human-readable string. \"piece layers\": A dictionary of strings. For each file in the file tree that is larger than the piece size it contains one string value. The keys are the merkle roots while the values consist of concatenated hashes of one layer within that merkle tree. The layer is chosen so that one hash covers piece length bytes. For example if the piece size is 16KiB then the leaf hashes are used. If a piece size of 128KiB is used then 3rd layer up from the leaf hashes is used. Layer hashes which exclusively cover data beyond the end of file, i.e. are only needed to balance the tree, are omitted. All hashes are stored in their binary format. A torrent is not valid if this field is absent, the contained hashes do not match the merkle roots or are not from the correct layer. Important The file tree root dictionary itself must not be a file, i.e. it must not contain a zero-length key with a dictionary containing a length key.","title":"Meta Version 2 Dictionary:"},{"location":"source/#bittorrent-v1","text":"","title":"Bittorrent V1"},{"location":"source/#v1-meta-dictionary","text":"announce: The URL of the tracker. info: This maps to a dictionary, with keys described below. name : maps to a UTF-8 encoded string which is the suggested name to save the file (or directory) as. It is purely advisory. piece length : maps to the number of bytes in each piece the file is split into. For the purposes of transfer, files are split into fixed-size pieces which are all the same length except for possibly the last one which may be truncated. piece length : is almost always a power of two, most commonly 2^18 = 256 K pieces : maps to a string whose length is a multiple of 20. It is to be subdivided into strings of length 20, each of which is the SHA1 hash of the piece at the corresponding index. length : In the single file case, maps to the length of the file in bytes. files : If present then the download represents a single file, otherwise it represents a set of files which go in a directory structure. For the purposes of the other keys, the multi-file case is treated as only having a single file by concatenating the files in the order they appear in the files list. The files list is the value files maps to, and is a list of dictionaries containing the following keys: path : A list of UTF-8 encoded strings corresponding to subdirectory names, the last of which is the actual file name length : Maps to the length of the file in bytes. length : Only present if the content is a single file. Maps to the length of the file in bytes. Note In the single file case, the name key is the name of a file, in the muliple file case, it's the name of a directory. Classes MetaFile \u2014 Base Class for all TorrentFile classes. TorrentFile \u2014 Class for creating Bittorrent meta files. TorrentFileV2 \u2014 Class for creating Bittorrent meta v2 files. TorrentFileHybrid \u2014 Construct the Hybrid torrent meta file with provided parameters. TorrentAssembler \u2014 Assembler class for Bittorrent version 2 and hybrid meta files.","title":"v1 meta-dictionary"},{"location":"source/#utils-module","text":"module torrentfile. utils Utility functions and classes used throughout package. Functions: get_piece_length: calculate ideal piece length for torrent file. sortfiles: traverse directory in sorted order yielding paths encountered. path_size: Sum the sizes of each file in path. get_file_list: Return list of all files contained in directory. path_stat: Get ideal piece length, total size, and file list for directory. path_piece_length: Get ideal piece length based on size of directory. Classes: MissingPathError: Custom exception raised when no path was provided to CLI. PieceLengthValueError: Custom exception raised when incorrect input value used for piece length field. Classes Memo \u2014 Memoice chache object. MissingPathError \u2014 Path parameter is required to specify target content. PieceLengthValueError \u2014 Piece Length parameter must equal a perfect power of 2. Functions get_file_list ( path ) (list) \u2014 Return a sorted list of file paths contained in directory. get_piece_length ( size ) (int) \u2014 Calculate the ideal piece length for bittorrent data. humanize_bytes ( amount ) (str) \u2014 Convert integer into human readable memory sized denomination. next_power_2 ( value ) (int) \u2014 Calculate the next perfect power of 2 equal to or greater than value. normalize_piece_length ( piece_length ) (int) \u2014 Verify input piece_length is valid and convert accordingly. path_piece_length ( path ) (int) \u2014 Calculate piece length for input path and contents. path_size ( path ) (int) \u2014 Return the total size of all files in path recursively. path_stat ( path ) (list) \u2014 Calculate directory statistics.","title":"Utils Module"},{"location":"source/#edit-module","text":"module torrentfile. edit Edit torrent module. Provides a facility by which certain properties of a torrent meta file can be edited by the user. The various command line arguments indicate which fields should be edited, and what the new value should be. Depending on what fields are chosen to edit, this command can trigger a new info hash which means the torrent will no longer be able to participate in the same swarm as the original unedited torrent.","title":"Edit Module"},{"location":"source/#keywords","text":"private comment source trackers web-seeds Functions edit_torrent ( metafile , args ) (dict) \u2014 Edit the properties and values in a torrent meta file. filter_empty ( args , meta , info ) \u2014 Remove dictionary keys with empty values.","title":"Keywords"},{"location":"source/#interactive-module","text":"module torrentfile. interactive Module contains the procedures used for Interactive Mode. Classes InteractiveEditor \u2014 Interactive dialog class for torrent editing. InteractiveCreator \u2014 Class namespace for interactive program options. Functions create_torrent ( ) \u2014 Create new torrent file interactively. edit_action ( ) \u2014 Edit the editable values of the torrent meta file. get_input ( *args ) (str) \u2014 Determine appropriate input function to call. recheck_torrent ( ) \u2014 Check torrent download completed percentage. select_action ( ) \u2014 Operate TorrentFile program interactively through terminal. showcenter ( txt ) \u2014 Print text to screen in the center position of the terminal. showtext ( txt ) \u2014 Print contents of txt to screen.","title":"Interactive Module"},{"location":"source/#cli-module","text":"module torrentfile. cli Command Line Interface for TorrentFile project. This module provides the primary command line argument parser for the torrentfile package. The main_script function is automatically invoked when called from command line, and parses accompanying arguments. Functions: main_script: process command line arguments and run program. activate_logger: turns on debug mode and logging facility. Classes TorrentFileHelpFormatter \u2014 Formatting class for help tips provided by the CLI. Functions activate_logger ( ) \u2014 Activate the builtin logging mechanism when passed debug flag from CLI. execute ( args ) (list) \u2014 Initialize Command Line Interface for torrentfile. execute ( args ) (list) \u2014 Initialize Command Line Interface for torrentfile. main ( ) \u2014 Initiate main function for CLI script.","title":"CLI Module"},{"location":"source/#recheck-module","text":"module torrentfile. recheck Module container Checker Class. The CheckerClass takes a torrentfile and tha path to it's contents. It will then iterate through every file and directory contained and compare their data to values contained within the torrent file. Completion percentages will be printed to screen for each file and at the end for the torrentfile as a whole. Classes Checker \u2014 Check a given file or directory to see if it matches a torrentfile. FeedChecker \u2014 Validates torrent content. HashChecker \u2014 Iterate through contents of meta data and verify with file contents.","title":"Recheck Module"},{"location":"source/#hasher-module","text":"module torrentfile. hasher Piece/File Hashers for Bittorrent meta file contents. Classes Hasher \u2014 Piece hasher for Bittorrent V1 files. HasherV2 \u2014 Calculate the root hash and piece layers for file contents. HasherHybrid \u2014 Calculate root and piece hashes for creating hybrid torrent file. FileHasher \u2014 Calculate root and piece hashes for creating hybrid torrent file. Functions merkle_root ( blocks ) (bytes) \u2014 Calculate the merkle root for a seq of sha256 hash digests.","title":"Hasher Module"},{"location":"source/#-","text":"Torrentfile can create Bittorrent metafiles for any content. Both Bittorrent v1 and v2 are fully supported. Also included is a torrent torrent file checker, which can verify a .torrent file is formated correctly as well as validate files and folders against metadata. Modules: metafile: Creation/Validation of v1 .torrent files. metafile2: Creation/Validation of v2 .torrent files. torrentfile: torrentfiles Command Line Interface implementation. exceptions: Custom Exceptions used in package. utils: Utilities used throughout package.","title":"----------"},{"location":"source/#torrentfile.create","text":"Execute the create CLI sub-command to create a new torrent metafile. Parameters: Name Type Description Default args argparse . Namespace positional and optional CLI arguments. required Returns: Type Description torrentfile . MetaFile object containing the path to created metafile and its contents.","title":"create()"},{"location":"source/#torrentfile.execute","text":"Initialize Command Line Interface for torrentfile. Parameters: Name Type Description Default args list Commandline arguments. default=None None Returns: Type Description list Depends on what the command line args were.","title":"execute()"},{"location":"source/#torrentfile.info","text":"Show torrent metafile details to user via stdout. Parameters: Name Type Description Default args dict command line arguements provided by the user. required","title":"info()"},{"location":"source/#torrentfile.magnet","text":"Create a magnet URI from a Bittorrent meta file. Parameters: Name Type Description Default metafile (Namespace||str) Namespace class for CLI arguments. required Returns: Type Description str created magnet URI.","title":"magnet()"},{"location":"source/#torrentfile.__main__","text":"Enable calling the package directly with python from the command line.","title":"__main__"},{"location":"source/#torrentfile.__main__.main","text":"Program entry point.","title":"main()"},{"location":"source/#torrentfile.cli","text":"Command Line Interface for TorrentFile project. This module provides the primary command line argument parser for the torrentfile package. The main_script function is automatically invoked when called from command line, and parses accompanying arguments. Functions: main_script: process command line arguments and run program. activate_logger: turns on debug mode and logging facility.","title":"cli"},{"location":"source/#torrentfile.cli.TorrentFileHelpFormatter","text":"Bases: HelpFormatter Formatting class for help tips provided by the CLI. Subclasses Argparse.HelpFormatter.","title":"TorrentFileHelpFormatter"},{"location":"source/#torrentfile.cli.TorrentFileHelpFormatter.__init__","text":"Construct HelpFormat class for usage output. Parameters: Name Type Description Default prog str Name of the program. required width int Max width of help message output. 40 max_help_positions int max length until line wrap. 30","title":"__init__()"},{"location":"source/#torrentfile.cli.TorrentFileHelpFormatter._format_text","text":"Format text for cli usage messages. Parameters: Name Type Description Default text str Pre-formatted text. required Returns: Type Description str Formatted text from input.","title":"_format_text()"},{"location":"source/#torrentfile.cli.TorrentFileHelpFormatter._join_parts","text":"Combine different sections of the help message. Parameters: Name Type Description Default part_strings list List of argument help messages and headers. required Returns: Type Description str Fully formatted help message for CLI.","title":"_join_parts()"},{"location":"source/#torrentfile.cli.TorrentFileHelpFormatter._split_lines","text":"Split multiline help messages and remove indentation. Parameters: Name Type Description Default text str text that needs to be split required _ int max width for line. required","title":"_split_lines()"},{"location":"source/#torrentfile.cli.TorrentFileHelpFormatter.format_headers","text":"Format help message section headers. Parameters: Name Type Description Default parts list List of individual lines for help message. required Returns: Type Description list Input list with formatted section headers.","title":"format_headers()"},{"location":"source/#torrentfile.cli.activate_logger","text":"Activate the builtin logging mechanism when passed debug flag from CLI.","title":"activate_logger()"},{"location":"source/#torrentfile.cli.execute","text":"Initialize Command Line Interface for torrentfile. Parameters: Name Type Description Default args list Commandline arguments. default=None None Returns: Type Description list Depends on what the command line args were.","title":"execute()"},{"location":"source/#torrentfile.cli.main","text":"Initiate main function for CLI script.","title":"main()"},{"location":"source/#torrentfile.commands","text":"The commands module contains the Action Commands executed by the CLI script. Each function pertains to a command line action/subcommand and drives specific features of the application.","title":"commands"},{"location":"source/#torrentfile.commands--functions","text":"create_command info_command edit_command recheck_command magnet_command","title":"Functions"},{"location":"source/#torrentfile.commands.create","text":"Execute the create CLI sub-command to create a new torrent metafile. Parameters: Name Type Description Default args argparse . Namespace positional and optional CLI arguments. required Returns: Type Description torrentfile . MetaFile object containing the path to created metafile and its contents.","title":"create()"},{"location":"source/#torrentfile.commands.edit","text":"Execute the edit CLI sub-command with provided arguments. Parameters: Name Type Description Default args Namespace positional and optional CLI arguments. required Returns: Type Description str path to edited torrent file.","title":"edit()"},{"location":"source/#torrentfile.commands.info","text":"Show torrent metafile details to user via stdout. Parameters: Name Type Description Default args dict command line arguements provided by the user. required","title":"info()"},{"location":"source/#torrentfile.commands.magnet","text":"Create a magnet URI from a Bittorrent meta file. Parameters: Name Type Description Default metafile (Namespace||str) Namespace class for CLI arguments. required Returns: Type Description str created magnet URI.","title":"magnet()"},{"location":"source/#torrentfile.commands.rebuild","text":"Attempt to rebuild a torrent based on the a torrent file. Recusively look through a directory for files that belong in a given torrent file, and rebuild as much of the torrent file as possible. Parameters: Name Type Description Default args list Command line arguments including the paths neccessary required Returns: Type Description int Total number of content files copied to the rebuild directory.","title":"rebuild()"},{"location":"source/#torrentfile.commands.recheck","text":"Execute recheck CLI sub-command. Parameters: Name Type Description Default args Namespace positional and optional arguments. required Returns: Type Description str The percentage of content currently saved to disk.","title":"recheck()"},{"location":"source/#torrentfile.edit","text":"Edit torrent module. Provides a facility by which certain properties of a torrent meta file can be edited by the user. The various command line arguments indicate which fields should be edited, and what the new value should be. Depending on what fields are chosen to edit, this command can trigger a new info hash which means the torrent will no longer be able to participate in the same swarm as the original unedited torrent.","title":"edit"},{"location":"source/#torrentfile.edit--keywords","text":"private comment source trackers web-seeds","title":"Keywords"},{"location":"source/#torrentfile.edit.edit_torrent","text":"Edit the properties and values in a torrent meta file. Parameters: Name Type Description Default metafile str path to the torrent meta file. required args dict key value pairs of the properties to be edited. required Returns: Type Description dict The edited and nested Meta and info dictionaries.","title":"edit_torrent()"},{"location":"source/#torrentfile.edit.filter_empty","text":"Remove dictionary keys with empty values. Parameters: Name Type Description Default args dict Editable metafile properties from user. required meta dict Metafile data dictionary. required info dict Metafile info dictionary. required","title":"filter_empty()"},{"location":"source/#torrentfile.hasher","text":"Piece/File Hashers for Bittorrent meta file contents.","title":"hasher"},{"location":"source/#torrentfile.hasher.FileHasher","text":"Bases: CbMixin , ProgMixin Calculate root and piece hashes for creating hybrid torrent file. Create merkle tree layers from sha256 hashed 16KiB blocks of contents. With a branching factor of 2, merge layer hashes until blocks equal piece_length bytes for the piece layer, and then the root hash. Parameters: Name Type Description Default path str path to target file. required piece_length int piece length for data chunks. required progress int default = None True","title":"FileHasher"},{"location":"source/#torrentfile.hasher.FileHasher.__init__","text":"Construct Hasher class instances for each file in torrent.","title":"__init__()"},{"location":"source/#torrentfile.hasher.FileHasher.__iter__","text":"Return self : needed to implement iterator implementation.","title":"__iter__()"},{"location":"source/#torrentfile.hasher.FileHasher.__next__","text":"Calculate layer hashes for contents of file. Returns: Type Description bytes The layer merckle root hash.","title":"__next__()"},{"location":"source/#torrentfile.hasher.FileHasher._calculate_root","text":"Calculate the root hash for opened file.","title":"_calculate_root()"},{"location":"source/#torrentfile.hasher.FileHasher._pad_remaining","text":"Generate Hash sized, 0 filled bytes for padding. Parameters: Name Type Description Default block_count int current total number of blocks collected. required Returns: Name Type Description padding bytes Padding to fill remaining portion of tree.","title":"_pad_remaining()"},{"location":"source/#torrentfile.hasher.Hasher","text":"Bases: CbMixin , ProgMixin Piece hasher for Bittorrent V1 files. Takes a sorted list of all file paths, calculates sha1 hash for fixed size pieces of file data from each file seemlessly until the last piece which may be smaller than others. Parameters: Name Type Description Default paths list List of files. required piece_length int Size of chuncks to split the data into. required progress int default = None True","title":"Hasher"},{"location":"source/#torrentfile.hasher.Hasher.__init__","text":"Generate hashes of piece length data from filelist contents.","title":"__init__()"},{"location":"source/#torrentfile.hasher.Hasher.__iter__","text":"Iterate through feed pieces. Returns: Name Type Description self iterator Iterator for leaves/hash pieces.","title":"__iter__()"},{"location":"source/#torrentfile.hasher.Hasher.__next__","text":"Generate piece-length pieces of data from input file list. Returns: Type Description bytes SHA1 hash of the piece extracted.","title":"__next__()"},{"location":"source/#torrentfile.hasher.Hasher._handle_partial","text":"Define the handling partial pieces that span 2 or more files. Parameters: Name Type Description Default arr bytearray Incomplete piece containing partial data required Returns: Name Type Description digest bytearray SHA1 digest of the complete piece.","title":"_handle_partial()"},{"location":"source/#torrentfile.hasher.Hasher.next_file","text":"Seemlessly transition to next file in file list. Returns: Name Type Description bool bool True if there is a next file otherwise False.","title":"next_file()"},{"location":"source/#torrentfile.hasher.HasherHybrid","text":"Bases: CbMixin , ProgMixin Calculate root and piece hashes for creating hybrid torrent file. DEPRECATED Create merkle tree layers from sha256 hashed 16KiB blocks of contents. With a branching factor of 2, merge layer hashes until blocks equal piece_length bytes for the piece layer, and then the root hash. Parameters: Name Type Description Default path str path to target file. required piece_length int piece length for data chunks. required progress int default = None True","title":"HasherHybrid"},{"location":"source/#torrentfile.hasher.HasherHybrid.__init__","text":"Construct Hasher class instances for each file in torrent. DEPRECATED","title":"__init__()"},{"location":"source/#torrentfile.hasher.HasherHybrid._calculate_root","text":"Calculate the root hash for opened file. DEPRECATED","title":"_calculate_root()"},{"location":"source/#torrentfile.hasher.HasherHybrid._pad_remaining","text":"Generate Hash sized, 0 filled bytes for padding. DEPRECATED Parameters: Name Type Description Default block_count int current total number of blocks collected. required Returns: Name Type Description padding bytes Padding to fill remaining portion of tree.","title":"_pad_remaining()"},{"location":"source/#torrentfile.hasher.HasherHybrid.process_file","text":"Calculate layer hashes for contents of file. DEPRECATED Parameters: Name Type Description Default data BytesIO File opened in read mode. required","title":"process_file()"},{"location":"source/#torrentfile.hasher.HasherV2","text":"Bases: CbMixin , ProgMixin Calculate the root hash and piece layers for file contents. DEPRECATED Iterates over 16KiB blocks of data from given file, hashes the data, then creates a hash tree from the individual block hashes until size of hashed data equals the piece-length. Then continues the hash tree until root hash is calculated. Parameters: Name Type Description Default path str Path to file. required piece_length int Size of layer hashes pieces. required progress int default = None True","title":"HasherV2"},{"location":"source/#torrentfile.hasher.HasherV2.__init__","text":"Calculate and store hash information for specific file. DEPRECATED","title":"__init__()"},{"location":"source/#torrentfile.hasher.HasherV2._calculate_root","text":"Calculate root hash for the target file. DEPRECATED","title":"_calculate_root()"},{"location":"source/#torrentfile.hasher.HasherV2.process_file","text":"Calculate hashes over 16KiB chuncks of file content. DEPRECATED Parameters: Name Type Description Default fd TextIOWrapper Opened file in read mode. required","title":"process_file()"},{"location":"source/#torrentfile.hasher.merkle_root","text":"Calculate the merkle root for a seq of sha256 hash digests. Parameters: Name Type Description Default blocks list a sequence of sha256 layer hashes. required Returns: Type Description bytes the sha256 root hash of the merkle tree.","title":"merkle_root()"},{"location":"source/#torrentfile.interactive","text":"Module contains the procedures used for Interactive Mode.","title":"interactive"},{"location":"source/#torrentfile.interactive.InteractiveCreator","text":"Class namespace for interactive program options.","title":"InteractiveCreator"},{"location":"source/#torrentfile.interactive.InteractiveCreator.__init__","text":"Initialize interactive meta file creator dialog.","title":"__init__()"},{"location":"source/#torrentfile.interactive.InteractiveCreator.get_props","text":"Gather details for torrentfile from user.","title":"get_props()"},{"location":"source/#torrentfile.interactive.InteractiveEditor","text":"Interactive dialog class for torrent editing.","title":"InteractiveEditor"},{"location":"source/#torrentfile.interactive.InteractiveEditor.__init__","text":"Initialize the Interactive torrent editor guide. Parameters: Name Type Description Default metafile str user input string identifying the path to a torrent meta file. required","title":"__init__()"},{"location":"source/#torrentfile.interactive.InteractiveEditor.edit_props","text":"Loop continuosly for edits until user signals DONE.","title":"edit_props()"},{"location":"source/#torrentfile.interactive.InteractiveEditor.sanatize_response","text":"Convert the input data into a form recognizable by the program. Parameters: Name Type Description Default key str name of the property and attribute being eddited. required response str User input value the property is being edited to. required","title":"sanatize_response()"},{"location":"source/#torrentfile.interactive.InteractiveEditor.show_current","text":"Display the current met file information to screen.","title":"show_current()"},{"location":"source/#torrentfile.interactive._get_input","text":"Gather information needed from user. Parameters: Name Type Description Default txt str The message usually containing instructions for the user. required Returns: Type Description str The text input received from the user.","title":"_get_input()"},{"location":"source/#torrentfile.interactive._get_input_loop","text":"Gather information needed from user. Parameters: Name Type Description Default txt str The message usually containing instructions for the user. required func function Validate/Check user input data, failure = retry, success = continue. required Returns: Type Description str The text input received from the user.","title":"_get_input_loop()"},{"location":"source/#torrentfile.interactive.create_torrent","text":"Create new torrent file interactively.","title":"create_torrent()"},{"location":"source/#torrentfile.interactive.edit_action","text":"Edit the editable values of the torrent meta file.","title":"edit_action()"},{"location":"source/#torrentfile.interactive.get_input","text":"Determine appropriate input function to call. Parameters: Name Type Description Default *args tuple Arbitrary number of args to pass to next function () Returns: Type Description str The results of the function call.","title":"get_input()"},{"location":"source/#torrentfile.interactive.recheck_torrent","text":"Check torrent download completed percentage.","title":"recheck_torrent()"},{"location":"source/#torrentfile.interactive.select_action","text":"Operate TorrentFile program interactively through terminal.","title":"select_action()"},{"location":"source/#torrentfile.interactive.showcenter","text":"Print text to screen in the center position of the terminal. Parameters: Name Type Description Default txt str the preformated message to send to stdout. required","title":"showcenter()"},{"location":"source/#torrentfile.interactive.showtext","text":"Print contents of txt to screen. Parameters: Name Type Description Default txt str text to print to terminal. required","title":"showtext()"},{"location":"source/#torrentfile.mixins","text":"Collection of classes that can be used as Mixins with other base classes. Classes such as TorrentFile, TorrentFilev2, and all Hasher classes can use the progress bar mixin. And any class is eligible to use the callback mixin.","title":"mixins"},{"location":"source/#torrentfile.mixins.CbMixin","text":"Mixin class to set a callback during hashing procedure.","title":"CbMixin"},{"location":"source/#torrentfile.mixins.CbMixin.set_callback","text":"Assign a callback to the Hashing class. Parameters: Name Type Description Default func function the callback function required","title":"set_callback()"},{"location":"source/#torrentfile.mixins.ProgMixin","text":"Progress bar mixin class. Displays progress of hashing individual files, usefull when hashing really big files.","title":"ProgMixin"},{"location":"source/#torrentfile.mixins.ProgMixin--methods","text":"prog_start prog_update prog_close","title":"Methods"},{"location":"source/#torrentfile.mixins.ProgMixin.is_active","text":"Test to see if there is an active progress bar for object. Returns: Name Type Description bool True if there is, otherwise False.","title":"is_active()"},{"location":"source/#torrentfile.mixins.ProgMixin.prog_close","text":"Finalize the last bits of progress bar. Increment the terminal by one line leaving the progress bar in place, and deleting the progress bar object to clear a space for the next one.","title":"prog_close()"},{"location":"source/#torrentfile.mixins.ProgMixin.prog_start","text":"Generate a new progress bar for the given file path. Parameters: Name Type Description Default total int the total amount of units accumulating towards. required path str path to file being hashed. required length int the number of characters of the actual progress bar. 50 unit str the text representation of the value being measured. None","title":"prog_start()"},{"location":"source/#torrentfile.mixins.ProgMixin.prog_update","text":"Update progress bar with given amount of progress. Parameters: Name Type Description Default val int the number of bytes count the progress bar should increase. required","title":"prog_update()"},{"location":"source/#torrentfile.mixins.ProgressBar","text":"Holds the state and details of the terminal progress bars. Parameters: Name Type Description Default total int the total amount to be accumulated. required title str the subject of the progress tracker required length int the width of the progress bar required unit str the text representation incremented required","title":"ProgressBar"},{"location":"source/#torrentfile.mixins.ProgressBar.__init__","text":"Construct the progress bar object and store state of it's properties.","title":"__init__()"},{"location":"source/#torrentfile.mixins.ProgressBar.increment","text":"Increase the state of the progress bar value. Parameters: Name Type Description Default value int the amount to increment the state by. required","title":"increment()"},{"location":"source/#torrentfile.mixins.ProgressBar.pbar","text":"Return the size of the filled portion of the progress bar. Returns: Name Type Description str the progress bar characters","title":"pbar()"},{"location":"source/#torrentfile.mixins.waiting","text":"Show loading message while thread completes processing. Parameters: Name Type Description Default msg str Message string printed before the progress bar required flag list Once flag is filled exit loop required timeout int max amount of time to run the function. 180","title":"waiting()"},{"location":"source/#torrentfile.rebuild","text":"Clases and functions for the rebuild or reassemble subcommand. Re-assemble a torrent into the propper directory structure as indicated by a torrent meta file, and validate the contents of each file allong the way. Displays a progress bar for each torrent.","title":"rebuild"},{"location":"source/#torrentfile.rebuild.Assembler","text":"Does most of the work in attempting the structure of torrentfiles. Requires three paths as arguments. - torrent metafile or directory containing multiple meta files - directory containing the contents of meta file - directory where torrents will be re-assembled","title":"Assembler"},{"location":"source/#torrentfile.rebuild.Assembler.__init__","text":"Construct the assembler object. Takes two paths as parameters, - file or directory containing 1 or more torrent meta files - path to where the contents are belived to be located. Parameters: Name Type Description Default metafile str path to torrent metafile or directory containing torrent metafiles. required contents str path to content or directory containing content that belongs to torrentfile. required dest str path to the directory where rebuild will take place. required","title":"__init__()"},{"location":"source/#torrentfile.rebuild.Assembler._compare_files","text":"Compare all files with given filename. Compare and find which files with the same filename matches the length of the given files length and copy the file to the destination directory including it's relative file structure. Parameters: Name Type Description Default val dict Details about a particular file listed in torrent metadata. required","title":"_compare_files()"},{"location":"source/#torrentfile.rebuild.Assembler._get_metafiles","text":"Collect all .torrent meta files from give directory or file. Parameters: Name Type Description Default metafile str path to a torrent meta file or directory containing torrent meta files. required","title":"_get_metafiles()"},{"location":"source/#torrentfile.rebuild.Assembler._traverse_contents","text":"Traverse the contents directory. Recursively walk the directory collecting file names and sizes for comparing to contents of torrent file. Parameters: Name Type Description Default path PathLike The current path being traversed. required","title":"_traverse_contents()"},{"location":"source/#torrentfile.rebuild.Assembler.rebuild","text":"Build the torrent file structure from contents of directory. Traverse contents dir and compare discovered files with files listed in torrent metadata and copy the matches to the destination directory respecting folder structures along the way.","title":"rebuild()"},{"location":"source/#torrentfile.rebuild.Metadata","text":"Class containing the metadata contents of a torrent file.","title":"Metadata"},{"location":"source/#torrentfile.rebuild.Metadata.__init__","text":"Construct metadata object for torrent info. Parameters: Name Type Description Default path str path to the .torrent file. required","title":"__init__()"},{"location":"source/#torrentfile.rebuild.Metadata._parse_tree","text":"Parse the file tree dictionary of the torrent metafile. Parameters: Name Type Description Default tree dict the dictionary representation of a file tree. required partials list list of paths leading up to the current key value. required","title":"_parse_tree()"},{"location":"source/#torrentfile.rebuild.Metadata.extract","text":"Decode and extract information for the .torrent file.","title":"extract()"},{"location":"source/#torrentfile.recheck","text":"Module container Checker Class. The CheckerClass takes a torrentfile and tha path to it's contents. It will then iterate through every file and directory contained and compare their data to values contained within the torrent file. Completion percentages will be printed to screen for each file and at the end for the torrentfile as a whole.","title":"recheck"},{"location":"source/#torrentfile.recheck.Checker","text":"Bases: ProgMixin Check a given file or directory to see if it matches a torrentfile. Public constructor for Checker class instance. Parameters: Name Type Description Default metafile str Path to \".torrent\" file. required path str Path where the content is located in filesystem. required","title":"Checker"},{"location":"source/#torrentfile.recheck.Checker--example","text":">> metafile = \"/path/to/torrentfile/content_file_or_dir.torrent\" >> location = \"/path/to/location\" >> os.path.exists(\"/path/to/location/content_file_or_dir\") Out: True >> checker = Checker(metafile, location)","title":"Example"},{"location":"source/#torrentfile.recheck.Checker.__init__","text":"Validate data against hashes contained in .torrent file. Parameters: Name Type Description Default metafile str path to .torrent file required path str path to content or contents parent directory. required","title":"__init__()"},{"location":"source/#torrentfile.recheck.Checker.check_paths","text":"Gather all file paths described in the torrent file.","title":"check_paths()"},{"location":"source/#torrentfile.recheck.Checker.find_root","text":"Check path for torrent content. The path can be a relative or absolute filesystem path. In the case where the content is a single file, the path may point directly to the the file, or it may point to the parent directory. If content points to a directory. The directory will be checked to see if it matches the torrent's name, if not the directories contents will be searched. The returned value will be the absolute path that matches the torrent's name. Parameters: Name Type Description Default path str root path to torrent content required Returns: Type Description str root path to content","title":"find_root()"},{"location":"source/#torrentfile.recheck.Checker.iter_hashes","text":"Produce results of comparing torrent contents piece by piece. Yields: Name Type Description chunck bytes hash of data found on disk piece bytes hash of data when complete and correct path str path to file being hashed size int length of bytes hashed for piece","title":"iter_hashes()"},{"location":"source/#torrentfile.recheck.Checker.log_msg","text":"Log message msg to logger and send msg to callback hook. Parameters: Name Type Description Default *args dict formatting args for log message () level int Log level for this message; default= logging.INFO logging.INFO","title":"log_msg()"},{"location":"source/#torrentfile.recheck.Checker.piece_checker","text":"Check individual pieces of the torrent. Returns: Type Description HashChecker | FeedChecker Individual piece hasher.","title":"piece_checker()"},{"location":"source/#torrentfile.recheck.Checker.register_callback","text":"Register hooks from 3rd party programs to access generated info. Parameters: Name Type Description Default hook function callback function for the logging feature. required","title":"register_callback()"},{"location":"source/#torrentfile.recheck.Checker.results","text":"Generate result percentage and store for future calls.","title":"results()"},{"location":"source/#torrentfile.recheck.Checker.walk_file_tree","text":"Traverse File Tree dictionary to get file details. Extract full pathnames, length, root hash, and layer hashes for each file included in the .torrent's file tree. Parameters: Name Type Description Default tree dict File Tree dict extracted from torrent file. required partials list list of intermediate pathnames. required","title":"walk_file_tree()"},{"location":"source/#torrentfile.recheck.FeedChecker","text":"Bases: ProgMixin Validates torrent content. Seemlesly validate torrent file contents by comparing hashes in metafile against data on disk. Parameters: Name Type Description Default checker object the checker class instance. required","title":"FeedChecker"},{"location":"source/#torrentfile.recheck.FeedChecker.__init__","text":"Generate hashes of piece length data from filelist contents.","title":"__init__()"},{"location":"source/#torrentfile.recheck.FeedChecker.__iter__","text":"Assign iterator and return self.","title":"__iter__()"},{"location":"source/#torrentfile.recheck.FeedChecker.__next__","text":"Yield back result of comparison.","title":"__next__()"},{"location":"source/#torrentfile.recheck.FeedChecker._gen_padding","text":"Create padded pieces where file sizes do not match. Parameters: Name Type Description Default partial bytes any remaining data from last file processed. required length int size of space that needs padding required read int portion of length already padded 0 Yields: Type Description bytes A piece length sized block of zeros.","title":"_gen_padding()"},{"location":"source/#torrentfile.recheck.FeedChecker.extract","text":"Split file paths contents into blocks of data for hash pieces. Parameters: Name Type Description Default path str path to content. required partial bytes any remaining content from last file. required Returns: Type Description bytearray Hash digest for block of .torrent contents.","title":"extract()"},{"location":"source/#torrentfile.recheck.FeedChecker.iter_pieces","text":"Iterate through, and hash pieces of torrent contents. Yields: Name Type Description piece bytes hash digest for block of torrent data.","title":"iter_pieces()"},{"location":"source/#torrentfile.recheck.HashChecker","text":"Bases: ProgMixin Iterate through contents of meta data and verify with file contents. Parameters: Name Type Description Default checker Checker the checker instance that maintains variables. required","title":"HashChecker"},{"location":"source/#torrentfile.recheck.HashChecker.Padder","text":"Padding class to generate padding hashes wherever needed. Parameters: Name Type Description Default length the total size of the mock file generating padding for. required piece_length int the block size that each hash represents. required","title":"Padder"},{"location":"source/#torrentfile.recheck.HashChecker.Padder.__init__","text":"Construct padding class to Mock missing or incomplete files. Parameters: Name Type Description Default length int size of the file required piece_length int the piece length for each iteration. required","title":"__init__()"},{"location":"source/#torrentfile.recheck.HashChecker.Padder.__iter__","text":"Return self to correctly implement iterator type.","title":"__iter__()"},{"location":"source/#torrentfile.recheck.HashChecker.Padder.__next__","text":"Iterate through seemingly endless sha256 hashes of zeros. Returns: Name Type Description tuple bytes returns the padding Raises: Type Description StopIteration","title":"__next__()"},{"location":"source/#torrentfile.recheck.HashChecker.__init__","text":"Construct a HybridChecker instance.","title":"__init__()"},{"location":"source/#torrentfile.recheck.HashChecker.__iter__","text":"Assign iterator and return self.","title":"__iter__()"},{"location":"source/#torrentfile.recheck.HashChecker.__next__","text":"Provide the result of comparison.","title":"__next__()"},{"location":"source/#torrentfile.recheck.HashChecker.advance","text":"Increment the number of pieces processed for the current file. Returns: Type Description tuple the piece and size","title":"advance()"},{"location":"source/#torrentfile.recheck.HashChecker.next_file","text":"Remove all references to processed files and prepare for the next. Returns: Type Description bool if there is a next file found","title":"next_file()"},{"location":"source/#torrentfile.recheck.HashChecker.process_current","text":"Gather necessary information to compare to metafile details. Returns: Type Description tuple a tuple containing the layer, piece, current path and size Raises: Type Description StopIteration","title":"process_current()"},{"location":"source/#torrentfile.torrent","text":"Classes and procedures pertaining to the creation of torrent meta files.","title":"torrent"},{"location":"source/#torrentfile.torrent--classes","text":"TorrentFile construct .torrent file. TorrentFileV2 construct .torrent v2 files using provided data. MetaFile base class for all MetaFile classes.","title":"Classes"},{"location":"source/#torrentfile.torrent--constants","text":"BLOCK_SIZE : int size of leaf hashes for merkle tree. HASH_SIZE : int Length of a sha256 hash.","title":"Constants"},{"location":"source/#torrentfile.torrent--bittorrent-v2","text":"From Bittorrent.org Documentation pages. Implementation details for Bittorrent Protocol v2. Note All strings in a .torrent file that contain text must be UTF-8 encoded.","title":"Bittorrent V2"},{"location":"source/#torrentfile.torrent--meta-version-2-dictionary","text":"\"announce\": The URL of the tracker. \"info\": This maps to a dictionary, with keys described below. \"name\": A display name for the torrent. It is purely advisory. \"piece length\": The number of bytes that each logical piece in the peer protocol refers to. I.e. it sets the granularity of piece, request, bitfield and have messages. It must be a power of two and at least 6KiB. \"meta version\": An integer value, set to 2 to indicate compatibility with the current revision of this specification. Version 1 is not assigned to avoid confusion with BEP3. Future revisions will only increment this issue to indicate an incompatible change has been made, for example that hash algorithms were changed due to newly discovered vulnerabilities. Lementations must check this field first and indicate that a torrent is of a newer version than they can handle before performing other idations which may result in more general messages about invalid files. Files are mapped into this piece address space so that each non-empty \"file tree\": A tree of dictionaries where dictionary keys represent UTF-8 encoded path elements. Entries with zero-length keys describe the properties of the composed path at that point. 'UTF-8 encoded' context only means that if the native encoding is known at creation time it must be converted to UTF-8. Keys may contain invalid UTF-8 sequences or characters and names that are reserved on specific filesystems. Implementations must be prepared to sanitize them. On platforms path components exactly matching '.' and '..' must be sanitized since they could lead to directory traversal attacks and conflicting path descriptions. On platforms that require UTF-8 path components this sanitizing step must happen after normalizing overlong UTF-8 encodings. File is aligned to a piece boundary and occurs in same order as the file tree. The last piece of each file may be shorter than the specified piece length, resulting in an alignment gap. \"length\": Length of the file in bytes. Presence of this field indicates that the dictionary describes a file, not a directory. Which means it must not have any sibling entries. \"pieces root\": For non-empty files this is the the root hash of a merkle tree with a branching factor of 2, constructed from 16KiB blocks of the file. The last block may be shorter than 16KiB. The remaining leaf hashes beyond the end of the file required to construct upper layers of the merkle tree are set to zero. As of meta version 2 SHA2-256 is used as digest function for the merkle tree. The hash is stored in its binary form, not as human-readable string. \"piece layers\": A dictionary of strings. For each file in the file tree that is larger than the piece size it contains one string value. The keys are the merkle roots while the values consist of concatenated hashes of one layer within that merkle tree. The layer is chosen so that one hash covers piece length bytes. For example if the piece size is 16KiB then the leaf hashes are used. If a piece size of 128KiB is used then 3rd layer up from the leaf hashes is used. Layer hashes which exclusively cover data beyond the end of file, i.e. are only needed to balance the tree, are omitted. All hashes are stored in their binary format. A torrent is not valid if this field is absent, the contained hashes do not match the merkle roots or are not from the correct layer. Important The file tree root dictionary itself must not be a file, i.e. it must not contain a zero-length key with a dictionary containing a length key.","title":"Meta Version 2 Dictionary:"},{"location":"source/#torrentfile.torrent--bittorrent-v1","text":"","title":"Bittorrent V1"},{"location":"source/#torrentfile.torrent--v1-meta-dictionary","text":"announce: The URL of the tracker. info: This maps to a dictionary, with keys described below. name : maps to a UTF-8 encoded string which is the suggested name to save the file (or directory) as. It is purely advisory. piece length : maps to the number of bytes in each piece the file is split into. For the purposes of transfer, files are split into fixed-size pieces which are all the same length except for possibly the last one which may be truncated. piece length : is almost always a power of two, most commonly 2^18 = 256 K pieces : maps to a string whose length is a multiple of 20. It is to be subdivided into strings of length 20, each of which is the SHA1 hash of the piece at the corresponding index. length : In the single file case, maps to the length of the file in bytes. files : If present then the download represents a single file, otherwise it represents a set of files which go in a directory structure. For the purposes of the other keys, the multi-file case is treated as only having a single file by concatenating the files in the order they appear in the files list. The files list is the value files maps to, and is a list of dictionaries containing the following keys: path : A list of UTF-8 encoded strings corresponding to subdirectory names, the last of which is the actual file name length : Maps to the length of the file in bytes. length : Only present if the content is a single file. Maps to the length of the file in bytes. Note In the single file case, the name key is the name of a file, in the muliple file case, it's the name of a directory.","title":"v1 meta-dictionary"},{"location":"source/#torrentfile.torrent.MetaFile","text":"Base Class for all TorrentFile classes. Parameters: Name Type Description Default path str target path to torrent content. Default: None None announce str One or more tracker URL's. Default: None None comment str A comment. Default: None None piece_length int Size of torrent pieces. Default: None None private bool For private trackers. Default: None False outfile str target path to write .torrent file. Default: None None source str Private tracker source. Default: None None progress str level of progress bar displayed Default: \"1\" 1 cwd bool If True change default save location to current directory False httpseeds list one or more web addresses where torrent content can be found. None url_list list one or more web addressess where torrent content exists. None content str alias for 'path' arg. None meta_version int indicates which Bittorrent protocol to use for hashing content None","title":"MetaFile"},{"location":"source/#torrentfile.torrent.MetaFile.__init__","text":"Construct MetaFile superclass and assign local attributes.","title":"__init__()"},{"location":"source/#torrentfile.torrent.MetaFile.assemble","text":"Overload in subclasses. Raises: Type Description Exception NotImplementedError","title":"assemble()"},{"location":"source/#torrentfile.torrent.MetaFile.set_callback","text":"Assign a callback function for the Hashing class to call for each hash. Parameters: Name Type Description Default func function The callback function which accepts a single paramter. required","title":"set_callback()"},{"location":"source/#torrentfile.torrent.MetaFile.sort_meta","text":"Sort the info and meta dictionaries.","title":"sort_meta()"},{"location":"source/#torrentfile.torrent.MetaFile.write","text":"Write meta information to .torrent file. Parameters: Name Type Description Default outfile str Destination path for .torrent file. default=None None Returns: Name Type Description outfile str Where the .torrent file was writen. meta dict .torrent meta information.","title":"write()"},{"location":"source/#torrentfile.torrent.TorrentAssembler","text":"Bases: MetaFile Assembler class for Bittorrent version 2 and hybrid meta files. This differs from the TorrentFileV2 and TorrentFileHybrid, because it can be used as an iterator and works for both versions. Parameters: Name Type Description Default **kwargs dict Keyword arguments for torrent options. {}","title":"TorrentAssembler"},{"location":"source/#torrentfile.torrent.TorrentAssembler.__init__","text":"Create Bittorrent v1 v2 hybrid metafiles.","title":"__init__()"},{"location":"source/#torrentfile.torrent.TorrentAssembler._traverse","text":"Build meta dictionary while walking directory. Parameters: Name Type Description Default path str Path to target file. required","title":"_traverse()"},{"location":"source/#torrentfile.torrent.TorrentAssembler.assemble","text":"Assemble the parts of the torrentfile into meta dictionary.","title":"assemble()"},{"location":"source/#torrentfile.torrent.TorrentFile","text":"Bases: MetaFile , ProgMixin Class for creating Bittorrent meta files. Construct Torrentfile class instance object. Parameters: Name Type Description Default **kwargs dict Dictionary containing torrent file options. {}","title":"TorrentFile"},{"location":"source/#torrentfile.torrent.TorrentFile.__init__","text":"Construct TorrentFile instance with given keyword args. Parameters: Name Type Description Default **kwargs dict dictionary of keyword args passed to superclass. {}","title":"__init__()"},{"location":"source/#torrentfile.torrent.TorrentFile.assemble","text":"Assemble components of torrent metafile. Returns: Type Description dict metadata dictionary for torrent file","title":"assemble()"},{"location":"source/#torrentfile.torrent.TorrentFileHybrid","text":"Bases: MetaFile , ProgMixin Construct the Hybrid torrent meta file with provided parameters. DEPRECATED Parameters: Name Type Description Default **kwargs dict Keyword arguments for torrent options. {}","title":"TorrentFileHybrid"},{"location":"source/#torrentfile.torrent.TorrentFileHybrid.__init__","text":"Create Bittorrent v1 v2 hybrid metafiles.","title":"__init__()"},{"location":"source/#torrentfile.torrent.TorrentFileHybrid._traverse","text":"Build meta dictionary while walking directory. DEPRECATED Parameters: Name Type Description Default path str Path to target file. required","title":"_traverse()"},{"location":"source/#torrentfile.torrent.TorrentFileHybrid.assemble","text":"Assemble the parts of the torrentfile into meta dictionary. DEPRECATED","title":"assemble()"},{"location":"source/#torrentfile.torrent.TorrentFileV2","text":"Bases: MetaFile , ProgMixin Class for creating Bittorrent meta v2 files. DEPRECATED Parameters: Name Type Description Default **kwargs dict Keyword arguments for torrent file options. {}","title":"TorrentFileV2"},{"location":"source/#torrentfile.torrent.TorrentFileV2.__init__","text":"Construct TorrentFileV2 Class instance from given parameters. DEPRECATED Parameters: Name Type Description Default **kwargs dict keywword arguments to pass to superclass. {}","title":"__init__()"},{"location":"source/#torrentfile.torrent.TorrentFileV2._traverse","text":"Walk directory tree. DEPRECATED Parameters: Name Type Description Default path str Path to file or directory. required","title":"_traverse()"},{"location":"source/#torrentfile.torrent.TorrentFileV2.assemble","text":"Assemble then return the meta dictionary for encoding. DEPRECATED Returns: Name Type Description meta dict Metainformation about the torrent.","title":"assemble()"},{"location":"source/#torrentfile.utils","text":"Utility functions and classes used throughout package. Functions: get_piece_length: calculate ideal piece length for torrent file. sortfiles: traverse directory in sorted order yielding paths encountered. path_size: Sum the sizes of each file in path. get_file_list: Return list of all files contained in directory. path_stat: Get ideal piece length, total size, and file list for directory. path_piece_length: Get ideal piece length based on size of directory. Classes: MissingPathError: Custom exception raised when no path was provided to CLI. PieceLengthValueError: Custom exception raised when incorrect input value used for piece length field.","title":"utils"},{"location":"source/#torrentfile.utils.Memo","text":"Memoice chache object. Parameters: Name Type Description Default func function The function that is being memoized. required","title":"Memo"},{"location":"source/#torrentfile.utils.Memo.__call__","text":"Invoke each time memo function is called. Parameters: Name Type Description Default path str The relative or absolute path being used as key in cache dict. required Returns: Name Type Description Any The results of calling the function with path.","title":"__call__()"},{"location":"source/#torrentfile.utils.Memo.__init__","text":"Construct for memoization.","title":"__init__()"},{"location":"source/#torrentfile.utils.MissingPathError","text":"Bases: Exception Path parameter is required to specify target content. Creating a .torrent file with no contents seems rather silly. Parameters: Name Type Description Default message str Message for user (optional). None","title":"MissingPathError"},{"location":"source/#torrentfile.utils.MissingPathError.__init__","text":"Raise when creating a meta file without specifying target content. The message argument is a message to pass to Exception base class.","title":"__init__()"},{"location":"source/#torrentfile.utils.PieceLengthValueError","text":"Bases: Exception Piece Length parameter must equal a perfect power of 2. Parameters: Name Type Description Default message str Message for user (optional). None","title":"PieceLengthValueError"},{"location":"source/#torrentfile.utils.PieceLengthValueError.__init__","text":"Raise when creating a meta file with incorrect piece length value. The message argument is a message to pass to Exception base class.","title":"__init__()"},{"location":"source/#torrentfile.utils._filelist_total","text":"Search directory tree for files. Parameters: Name Type Description Default path str Path to file or directory base required Returns: Type Description int Sum of all filesizes in filelist. list All file paths within directory tree.","title":"_filelist_total()"},{"location":"source/#torrentfile.utils.filelist_total","text":"Perform error checking and format conversion to os.PathLike. Parameters: Name Type Description Default pathstring str An existing filesystem path. required Returns: Type Description os . PathLike Input path converted to bytes format. Raises: Type Description MissingPathError File could not be found.","title":"filelist_total()"},{"location":"source/#torrentfile.utils.get_file_list","text":"Return a sorted list of file paths contained in directory. Parameters: Name Type Description Default path str target file or directory. required Returns: Type Description list sorted list of file paths.","title":"get_file_list()"},{"location":"source/#torrentfile.utils.get_piece_length","text":"Calculate the ideal piece length for bittorrent data. Parameters: Name Type Description Default size int Total bits of all files incluided in .torrent file. required Returns: Type Description int Ideal piece length.","title":"get_piece_length()"},{"location":"source/#torrentfile.utils.humanize_bytes","text":"Convert integer into human readable memory sized denomination. Parameters: Name Type Description Default amount int total number of bytes. required Returns: Type Description str human readable representation of the given amount of bytes.","title":"humanize_bytes()"},{"location":"source/#torrentfile.utils.next_power_2","text":"Calculate the next perfect power of 2 equal to or greater than value. Parameters: Name Type Description Default value int integer value that is less than some perfect power of 2. required Returns: Type Description int The next power of 2 greater than value, or value if already power of 2.","title":"next_power_2()"},{"location":"source/#torrentfile.utils.normalize_piece_length","text":"Verify input piece_length is valid and convert accordingly. Parameters: Name Type Description Default piece_length int | str The piece length provided by user. required Returns: Type Description int normalized piece length. Raises: Type Description PieceLengthValueError : If piece length is improper value.","title":"normalize_piece_length()"},{"location":"source/#torrentfile.utils.path_piece_length","text":"Calculate piece length for input path and contents. Parameters: Name Type Description Default path str The absolute path to directory and contents. required Returns: Type Description int The size of pieces of torrent content.","title":"path_piece_length()"},{"location":"source/#torrentfile.utils.path_size","text":"Return the total size of all files in path recursively. Parameters: Name Type Description Default path str path to target file or directory. required Returns: Type Description int total size of files.","title":"path_size()"},{"location":"source/#torrentfile.utils.path_stat","text":"Calculate directory statistics. Parameters: Name Type Description Default path str The path to start calculating from. required Returns: Type Description list List of all files contained in Directory int Total sum of bytes from all contents of dir int The size of pieces of the torrent contents.","title":"path_stat()"},{"location":"source/#torrentfile.version","text":"Holds the release version number. Command Line Interface for TorrentFile project. This module provides the primary command line argument parser for the torrentfile package. The main_script function is automatically invoked when called from command line, and parses accompanying arguments. Functions: main_script: process command line arguments and run program. activate_logger: turns on debug mode and logging facility.","title":"version"},{"location":"source/#torrentfile.cli.TorrentFileHelpFormatter","text":"Bases: HelpFormatter Formatting class for help tips provided by the CLI. Subclasses Argparse.HelpFormatter.","title":"TorrentFileHelpFormatter"},{"location":"source/#torrentfile.cli.TorrentFileHelpFormatter.__init__","text":"Construct HelpFormat class for usage output. Parameters: Name Type Description Default prog str Name of the program. required width int Max width of help message output. 40 max_help_positions int max length until line wrap. 30","title":"__init__()"},{"location":"source/#torrentfile.cli.TorrentFileHelpFormatter._format_text","text":"Format text for cli usage messages. Parameters: Name Type Description Default text str Pre-formatted text. required Returns: Type Description str Formatted text from input.","title":"_format_text()"},{"location":"source/#torrentfile.cli.TorrentFileHelpFormatter._join_parts","text":"Combine different sections of the help message. Parameters: Name Type Description Default part_strings list List of argument help messages and headers. required Returns: Type Description str Fully formatted help message for CLI.","title":"_join_parts()"},{"location":"source/#torrentfile.cli.TorrentFileHelpFormatter._split_lines","text":"Split multiline help messages and remove indentation. Parameters: Name Type Description Default text str text that needs to be split required _ int max width for line. required","title":"_split_lines()"},{"location":"source/#torrentfile.cli.TorrentFileHelpFormatter.format_headers","text":"Format help message section headers. Parameters: Name Type Description Default parts list List of individual lines for help message. required Returns: Type Description list Input list with formatted section headers.","title":"format_headers()"},{"location":"source/#torrentfile.cli.activate_logger","text":"Activate the builtin logging mechanism when passed debug flag from CLI.","title":"activate_logger()"},{"location":"source/#torrentfile.cli.execute","text":"Initialize Command Line Interface for torrentfile. Parameters: Name Type Description Default args list Commandline arguments. default=None None Returns: Type Description list Depends on what the command line args were.","title":"execute()"},{"location":"source/#torrentfile.cli.main","text":"Initiate main function for CLI script. Edit torrent module. Provides a facility by which certain properties of a torrent meta file can be edited by the user. The various command line arguments indicate which fields should be edited, and what the new value should be. Depending on what fields are chosen to edit, this command can trigger a new info hash which means the torrent will no longer be able to participate in the same swarm as the original unedited torrent.","title":"main()"},{"location":"source/#torrentfile.edit--keywords","text":"private comment source trackers web-seeds","title":"Keywords"},{"location":"source/#torrentfile.edit.edit_torrent","text":"Edit the properties and values in a torrent meta file. Parameters: Name Type Description Default metafile str path to the torrent meta file. required args dict key value pairs of the properties to be edited. required Returns: Type Description dict The edited and nested Meta and info dictionaries.","title":"edit_torrent()"},{"location":"source/#torrentfile.edit.filter_empty","text":"Remove dictionary keys with empty values. Parameters: Name Type Description Default args dict Editable metafile properties from user. required meta dict Metafile data dictionary. required info dict Metafile info dictionary. required Piece/File Hashers for Bittorrent meta file contents.","title":"filter_empty()"},{"location":"source/#torrentfile.hasher.FileHasher","text":"Bases: CbMixin , ProgMixin Calculate root and piece hashes for creating hybrid torrent file. Create merkle tree layers from sha256 hashed 16KiB blocks of contents. With a branching factor of 2, merge layer hashes until blocks equal piece_length bytes for the piece layer, and then the root hash. Parameters: Name Type Description Default path str path to target file. required piece_length int piece length for data chunks. required progress int default = None True","title":"FileHasher"},{"location":"source/#torrentfile.hasher.FileHasher.__init__","text":"Construct Hasher class instances for each file in torrent.","title":"__init__()"},{"location":"source/#torrentfile.hasher.FileHasher.__iter__","text":"Return self : needed to implement iterator implementation.","title":"__iter__()"},{"location":"source/#torrentfile.hasher.FileHasher.__next__","text":"Calculate layer hashes for contents of file. Returns: Type Description bytes The layer merckle root hash.","title":"__next__()"},{"location":"source/#torrentfile.hasher.FileHasher._calculate_root","text":"Calculate the root hash for opened file.","title":"_calculate_root()"},{"location":"source/#torrentfile.hasher.FileHasher._pad_remaining","text":"Generate Hash sized, 0 filled bytes for padding. Parameters: Name Type Description Default block_count int current total number of blocks collected. required Returns: Name Type Description padding bytes Padding to fill remaining portion of tree.","title":"_pad_remaining()"},{"location":"source/#torrentfile.hasher.Hasher","text":"Bases: CbMixin , ProgMixin Piece hasher for Bittorrent V1 files. Takes a sorted list of all file paths, calculates sha1 hash for fixed size pieces of file data from each file seemlessly until the last piece which may be smaller than others. Parameters: Name Type Description Default paths list List of files. required piece_length int Size of chuncks to split the data into. required progress int default = None True","title":"Hasher"},{"location":"source/#torrentfile.hasher.Hasher.__init__","text":"Generate hashes of piece length data from filelist contents.","title":"__init__()"},{"location":"source/#torrentfile.hasher.Hasher.__iter__","text":"Iterate through feed pieces. Returns: Name Type Description self iterator Iterator for leaves/hash pieces.","title":"__iter__()"},{"location":"source/#torrentfile.hasher.Hasher.__next__","text":"Generate piece-length pieces of data from input file list. Returns: Type Description bytes SHA1 hash of the piece extracted.","title":"__next__()"},{"location":"source/#torrentfile.hasher.Hasher._handle_partial","text":"Define the handling partial pieces that span 2 or more files. Parameters: Name Type Description Default arr bytearray Incomplete piece containing partial data required Returns: Name Type Description digest bytearray SHA1 digest of the complete piece.","title":"_handle_partial()"},{"location":"source/#torrentfile.hasher.Hasher.next_file","text":"Seemlessly transition to next file in file list. Returns: Name Type Description bool bool True if there is a next file otherwise False.","title":"next_file()"},{"location":"source/#torrentfile.hasher.HasherHybrid","text":"Bases: CbMixin , ProgMixin Calculate root and piece hashes for creating hybrid torrent file. DEPRECATED Create merkle tree layers from sha256 hashed 16KiB blocks of contents. With a branching factor of 2, merge layer hashes until blocks equal piece_length bytes for the piece layer, and then the root hash. Parameters: Name Type Description Default path str path to target file. required piece_length int piece length for data chunks. required progress int default = None True","title":"HasherHybrid"},{"location":"source/#torrentfile.hasher.HasherHybrid.__init__","text":"Construct Hasher class instances for each file in torrent. DEPRECATED","title":"__init__()"},{"location":"source/#torrentfile.hasher.HasherHybrid._calculate_root","text":"Calculate the root hash for opened file. DEPRECATED","title":"_calculate_root()"},{"location":"source/#torrentfile.hasher.HasherHybrid._pad_remaining","text":"Generate Hash sized, 0 filled bytes for padding. DEPRECATED Parameters: Name Type Description Default block_count int current total number of blocks collected. required Returns: Name Type Description padding bytes Padding to fill remaining portion of tree.","title":"_pad_remaining()"},{"location":"source/#torrentfile.hasher.HasherHybrid.process_file","text":"Calculate layer hashes for contents of file. DEPRECATED Parameters: Name Type Description Default data BytesIO File opened in read mode. required","title":"process_file()"},{"location":"source/#torrentfile.hasher.HasherV2","text":"Bases: CbMixin , ProgMixin Calculate the root hash and piece layers for file contents. DEPRECATED Iterates over 16KiB blocks of data from given file, hashes the data, then creates a hash tree from the individual block hashes until size of hashed data equals the piece-length. Then continues the hash tree until root hash is calculated. Parameters: Name Type Description Default path str Path to file. required piece_length int Size of layer hashes pieces. required progress int default = None True","title":"HasherV2"},{"location":"source/#torrentfile.hasher.HasherV2.__init__","text":"Calculate and store hash information for specific file. DEPRECATED","title":"__init__()"},{"location":"source/#torrentfile.hasher.HasherV2._calculate_root","text":"Calculate root hash for the target file. DEPRECATED","title":"_calculate_root()"},{"location":"source/#torrentfile.hasher.HasherV2.process_file","text":"Calculate hashes over 16KiB chuncks of file content. DEPRECATED Parameters: Name Type Description Default fd TextIOWrapper Opened file in read mode. required","title":"process_file()"},{"location":"source/#torrentfile.hasher.merkle_root","text":"Calculate the merkle root for a seq of sha256 hash digests. Parameters: Name Type Description Default blocks list a sequence of sha256 layer hashes. required Returns: Type Description bytes the sha256 root hash of the merkle tree. Module contains the procedures used for Interactive Mode.","title":"merkle_root()"},{"location":"source/#torrentfile.interactive.InteractiveCreator","text":"Class namespace for interactive program options.","title":"InteractiveCreator"},{"location":"source/#torrentfile.interactive.InteractiveCreator.__init__","text":"Initialize interactive meta file creator dialog.","title":"__init__()"},{"location":"source/#torrentfile.interactive.InteractiveCreator.get_props","text":"Gather details for torrentfile from user.","title":"get_props()"},{"location":"source/#torrentfile.interactive.InteractiveEditor","text":"Interactive dialog class for torrent editing.","title":"InteractiveEditor"},{"location":"source/#torrentfile.interactive.InteractiveEditor.__init__","text":"Initialize the Interactive torrent editor guide. Parameters: Name Type Description Default metafile str user input string identifying the path to a torrent meta file. required","title":"__init__()"},{"location":"source/#torrentfile.interactive.InteractiveEditor.edit_props","text":"Loop continuosly for edits until user signals DONE.","title":"edit_props()"},{"location":"source/#torrentfile.interactive.InteractiveEditor.sanatize_response","text":"Convert the input data into a form recognizable by the program. Parameters: Name Type Description Default key str name of the property and attribute being eddited. required response str User input value the property is being edited to. required","title":"sanatize_response()"},{"location":"source/#torrentfile.interactive.InteractiveEditor.show_current","text":"Display the current met file information to screen.","title":"show_current()"},{"location":"source/#torrentfile.interactive._get_input","text":"Gather information needed from user. Parameters: Name Type Description Default txt str The message usually containing instructions for the user. required Returns: Type Description str The text input received from the user.","title":"_get_input()"},{"location":"source/#torrentfile.interactive._get_input_loop","text":"Gather information needed from user. Parameters: Name Type Description Default txt str The message usually containing instructions for the user. required func function Validate/Check user input data, failure = retry, success = continue. required Returns: Type Description str The text input received from the user.","title":"_get_input_loop()"},{"location":"source/#torrentfile.interactive.create_torrent","text":"Create new torrent file interactively.","title":"create_torrent()"},{"location":"source/#torrentfile.interactive.edit_action","text":"Edit the editable values of the torrent meta file.","title":"edit_action()"},{"location":"source/#torrentfile.interactive.get_input","text":"Determine appropriate input function to call. Parameters: Name Type Description Default *args tuple Arbitrary number of args to pass to next function () Returns: Type Description str The results of the function call.","title":"get_input()"},{"location":"source/#torrentfile.interactive.recheck_torrent","text":"Check torrent download completed percentage.","title":"recheck_torrent()"},{"location":"source/#torrentfile.interactive.select_action","text":"Operate TorrentFile program interactively through terminal.","title":"select_action()"},{"location":"source/#torrentfile.interactive.showcenter","text":"Print text to screen in the center position of the terminal. Parameters: Name Type Description Default txt str the preformated message to send to stdout. required","title":"showcenter()"},{"location":"source/#torrentfile.interactive.showtext","text":"Print contents of txt to screen. Parameters: Name Type Description Default txt str text to print to terminal. required Module container Checker Class. The CheckerClass takes a torrentfile and tha path to it's contents. It will then iterate through every file and directory contained and compare their data to values contained within the torrent file. Completion percentages will be printed to screen for each file and at the end for the torrentfile as a whole.","title":"showtext()"},{"location":"source/#torrentfile.recheck.Checker","text":"Bases: ProgMixin Check a given file or directory to see if it matches a torrentfile. Public constructor for Checker class instance. Parameters: Name Type Description Default metafile str Path to \".torrent\" file. required path str Path where the content is located in filesystem. required","title":"Checker"},{"location":"source/#torrentfile.recheck.Checker--example","text":">> metafile = \"/path/to/torrentfile/content_file_or_dir.torrent\" >> location = \"/path/to/location\" >> os.path.exists(\"/path/to/location/content_file_or_dir\") Out: True >> checker = Checker(metafile, location)","title":"Example"},{"location":"source/#torrentfile.recheck.Checker.__init__","text":"Validate data against hashes contained in .torrent file. Parameters: Name Type Description Default metafile str path to .torrent file required path str path to content or contents parent directory. required","title":"__init__()"},{"location":"source/#torrentfile.recheck.Checker.check_paths","text":"Gather all file paths described in the torrent file.","title":"check_paths()"},{"location":"source/#torrentfile.recheck.Checker.find_root","text":"Check path for torrent content. The path can be a relative or absolute filesystem path. In the case where the content is a single file, the path may point directly to the the file, or it may point to the parent directory. If content points to a directory. The directory will be checked to see if it matches the torrent's name, if not the directories contents will be searched. The returned value will be the absolute path that matches the torrent's name. Parameters: Name Type Description Default path str root path to torrent content required Returns: Type Description str root path to content","title":"find_root()"},{"location":"source/#torrentfile.recheck.Checker.iter_hashes","text":"Produce results of comparing torrent contents piece by piece. Yields: Name Type Description chunck bytes hash of data found on disk piece bytes hash of data when complete and correct path str path to file being hashed size int length of bytes hashed for piece","title":"iter_hashes()"},{"location":"source/#torrentfile.recheck.Checker.log_msg","text":"Log message msg to logger and send msg to callback hook. Parameters: Name Type Description Default *args dict formatting args for log message () level int Log level for this message; default= logging.INFO logging.INFO","title":"log_msg()"},{"location":"source/#torrentfile.recheck.Checker.piece_checker","text":"Check individual pieces of the torrent. Returns: Type Description HashChecker | FeedChecker Individual piece hasher.","title":"piece_checker()"},{"location":"source/#torrentfile.recheck.Checker.register_callback","text":"Register hooks from 3rd party programs to access generated info. Parameters: Name Type Description Default hook function callback function for the logging feature. required","title":"register_callback()"},{"location":"source/#torrentfile.recheck.Checker.results","text":"Generate result percentage and store for future calls.","title":"results()"},{"location":"source/#torrentfile.recheck.Checker.walk_file_tree","text":"Traverse File Tree dictionary to get file details. Extract full pathnames, length, root hash, and layer hashes for each file included in the .torrent's file tree. Parameters: Name Type Description Default tree dict File Tree dict extracted from torrent file. required partials list list of intermediate pathnames. required","title":"walk_file_tree()"},{"location":"source/#torrentfile.recheck.FeedChecker","text":"Bases: ProgMixin Validates torrent content. Seemlesly validate torrent file contents by comparing hashes in metafile against data on disk. Parameters: Name Type Description Default checker object the checker class instance. required","title":"FeedChecker"},{"location":"source/#torrentfile.recheck.FeedChecker.__init__","text":"Generate hashes of piece length data from filelist contents.","title":"__init__()"},{"location":"source/#torrentfile.recheck.FeedChecker.__iter__","text":"Assign iterator and return self.","title":"__iter__()"},{"location":"source/#torrentfile.recheck.FeedChecker.__next__","text":"Yield back result of comparison.","title":"__next__()"},{"location":"source/#torrentfile.recheck.FeedChecker._gen_padding","text":"Create padded pieces where file sizes do not match. Parameters: Name Type Description Default partial bytes any remaining data from last file processed. required length int size of space that needs padding required read int portion of length already padded 0 Yields: Type Description bytes A piece length sized block of zeros.","title":"_gen_padding()"},{"location":"source/#torrentfile.recheck.FeedChecker.extract","text":"Split file paths contents into blocks of data for hash pieces. Parameters: Name Type Description Default path str path to content. required partial bytes any remaining content from last file. required Returns: Type Description bytearray Hash digest for block of .torrent contents.","title":"extract()"},{"location":"source/#torrentfile.recheck.FeedChecker.iter_pieces","text":"Iterate through, and hash pieces of torrent contents. Yields: Name Type Description piece bytes hash digest for block of torrent data.","title":"iter_pieces()"},{"location":"source/#torrentfile.recheck.HashChecker","text":"Bases: ProgMixin Iterate through contents of meta data and verify with file contents. Parameters: Name Type Description Default checker Checker the checker instance that maintains variables. required","title":"HashChecker"},{"location":"source/#torrentfile.recheck.HashChecker.Padder","text":"Padding class to generate padding hashes wherever needed. Parameters: Name Type Description Default length the total size of the mock file generating padding for. required piece_length int the block size that each hash represents. required","title":"Padder"},{"location":"source/#torrentfile.recheck.HashChecker.Padder.__init__","text":"Construct padding class to Mock missing or incomplete files. Parameters: Name Type Description Default length int size of the file required piece_length int the piece length for each iteration. required","title":"__init__()"},{"location":"source/#torrentfile.recheck.HashChecker.Padder.__iter__","text":"Return self to correctly implement iterator type.","title":"__iter__()"},{"location":"source/#torrentfile.recheck.HashChecker.Padder.__next__","text":"Iterate through seemingly endless sha256 hashes of zeros. Returns: Name Type Description tuple bytes returns the padding Raises: Type Description StopIteration","title":"__next__()"},{"location":"source/#torrentfile.recheck.HashChecker.__init__","text":"Construct a HybridChecker instance.","title":"__init__()"},{"location":"source/#torrentfile.recheck.HashChecker.__iter__","text":"Assign iterator and return self.","title":"__iter__()"},{"location":"source/#torrentfile.recheck.HashChecker.__next__","text":"Provide the result of comparison.","title":"__next__()"},{"location":"source/#torrentfile.recheck.HashChecker.advance","text":"Increment the number of pieces processed for the current file. Returns: Type Description tuple the piece and size","title":"advance()"},{"location":"source/#torrentfile.recheck.HashChecker.next_file","text":"Remove all references to processed files and prepare for the next. Returns: Type Description bool if there is a next file found","title":"next_file()"},{"location":"source/#torrentfile.recheck.HashChecker.process_current","text":"Gather necessary information to compare to metafile details. Returns: Type Description tuple a tuple containing the layer, piece, current path and size Raises: Type Description StopIteration Clases and functions for the rebuild or reassemble subcommand. Re-assemble a torrent into the propper directory structure as indicated by a torrent meta file, and validate the contents of each file allong the way. Displays a progress bar for each torrent.","title":"process_current()"},{"location":"source/#torrentfile.rebuild.Assembler","text":"Does most of the work in attempting the structure of torrentfiles. Requires three paths as arguments. - torrent metafile or directory containing multiple meta files - directory containing the contents of meta file - directory where torrents will be re-assembled","title":"Assembler"},{"location":"source/#torrentfile.rebuild.Assembler.__init__","text":"Construct the assembler object. Takes two paths as parameters, - file or directory containing 1 or more torrent meta files - path to where the contents are belived to be located. Parameters: Name Type Description Default metafile str path to torrent metafile or directory containing torrent metafiles. required contents str path to content or directory containing content that belongs to torrentfile. required dest str path to the directory where rebuild will take place. required","title":"__init__()"},{"location":"source/#torrentfile.rebuild.Assembler._compare_files","text":"Compare all files with given filename. Compare and find which files with the same filename matches the length of the given files length and copy the file to the destination directory including it's relative file structure. Parameters: Name Type Description Default val dict Details about a particular file listed in torrent metadata. required","title":"_compare_files()"},{"location":"source/#torrentfile.rebuild.Assembler._get_metafiles","text":"Collect all .torrent meta files from give directory or file. Parameters: Name Type Description Default metafile str path to a torrent meta file or directory containing torrent meta files. required","title":"_get_metafiles()"},{"location":"source/#torrentfile.rebuild.Assembler._traverse_contents","text":"Traverse the contents directory. Recursively walk the directory collecting file names and sizes for comparing to contents of torrent file. Parameters: Name Type Description Default path PathLike The current path being traversed. required","title":"_traverse_contents()"},{"location":"source/#torrentfile.rebuild.Assembler.rebuild","text":"Build the torrent file structure from contents of directory. Traverse contents dir and compare discovered files with files listed in torrent metadata and copy the matches to the destination directory respecting folder structures along the way.","title":"rebuild()"},{"location":"source/#torrentfile.rebuild.Metadata","text":"Class containing the metadata contents of a torrent file.","title":"Metadata"},{"location":"source/#torrentfile.rebuild.Metadata.__init__","text":"Construct metadata object for torrent info. Parameters: Name Type Description Default path str path to the .torrent file. required","title":"__init__()"},{"location":"source/#torrentfile.rebuild.Metadata._parse_tree","text":"Parse the file tree dictionary of the torrent metafile. Parameters: Name Type Description Default tree dict the dictionary representation of a file tree. required partials list list of paths leading up to the current key value. required","title":"_parse_tree()"},{"location":"source/#torrentfile.rebuild.Metadata.extract","text":"Decode and extract information for the .torrent file. Classes and procedures pertaining to the creation of torrent meta files.","title":"extract()"},{"location":"source/#torrentfile.torrent--classes","text":"TorrentFile construct .torrent file. TorrentFileV2 construct .torrent v2 files using provided data. MetaFile base class for all MetaFile classes.","title":"Classes"},{"location":"source/#torrentfile.torrent--constants","text":"BLOCK_SIZE : int size of leaf hashes for merkle tree. HASH_SIZE : int Length of a sha256 hash.","title":"Constants"},{"location":"source/#torrentfile.torrent--bittorrent-v2","text":"From Bittorrent.org Documentation pages. Implementation details for Bittorrent Protocol v2. Note All strings in a .torrent file that contain text must be UTF-8 encoded.","title":"Bittorrent V2"},{"location":"source/#torrentfile.torrent--meta-version-2-dictionary","text":"\"announce\": The URL of the tracker. \"info\": This maps to a dictionary, with keys described below. \"name\": A display name for the torrent. It is purely advisory. \"piece length\": The number of bytes that each logical piece in the peer protocol refers to. I.e. it sets the granularity of piece, request, bitfield and have messages. It must be a power of two and at least 6KiB. \"meta version\": An integer value, set to 2 to indicate compatibility with the current revision of this specification. Version 1 is not assigned to avoid confusion with BEP3. Future revisions will only increment this issue to indicate an incompatible change has been made, for example that hash algorithms were changed due to newly discovered vulnerabilities. Lementations must check this field first and indicate that a torrent is of a newer version than they can handle before performing other idations which may result in more general messages about invalid files. Files are mapped into this piece address space so that each non-empty \"file tree\": A tree of dictionaries where dictionary keys represent UTF-8 encoded path elements. Entries with zero-length keys describe the properties of the composed path at that point. 'UTF-8 encoded' context only means that if the native encoding is known at creation time it must be converted to UTF-8. Keys may contain invalid UTF-8 sequences or characters and names that are reserved on specific filesystems. Implementations must be prepared to sanitize them. On platforms path components exactly matching '.' and '..' must be sanitized since they could lead to directory traversal attacks and conflicting path descriptions. On platforms that require UTF-8 path components this sanitizing step must happen after normalizing overlong UTF-8 encodings. File is aligned to a piece boundary and occurs in same order as the file tree. The last piece of each file may be shorter than the specified piece length, resulting in an alignment gap. \"length\": Length of the file in bytes. Presence of this field indicates that the dictionary describes a file, not a directory. Which means it must not have any sibling entries. \"pieces root\": For non-empty files this is the the root hash of a merkle tree with a branching factor of 2, constructed from 16KiB blocks of the file. The last block may be shorter than 16KiB. The remaining leaf hashes beyond the end of the file required to construct upper layers of the merkle tree are set to zero. As of meta version 2 SHA2-256 is used as digest function for the merkle tree. The hash is stored in its binary form, not as human-readable string. \"piece layers\": A dictionary of strings. For each file in the file tree that is larger than the piece size it contains one string value. The keys are the merkle roots while the values consist of concatenated hashes of one layer within that merkle tree. The layer is chosen so that one hash covers piece length bytes. For example if the piece size is 16KiB then the leaf hashes are used. If a piece size of 128KiB is used then 3rd layer up from the leaf hashes is used. Layer hashes which exclusively cover data beyond the end of file, i.e. are only needed to balance the tree, are omitted. All hashes are stored in their binary format. A torrent is not valid if this field is absent, the contained hashes do not match the merkle roots or are not from the correct layer. Important The file tree root dictionary itself must not be a file, i.e. it must not contain a zero-length key with a dictionary containing a length key.","title":"Meta Version 2 Dictionary:"},{"location":"source/#torrentfile.torrent--bittorrent-v1","text":"","title":"Bittorrent V1"},{"location":"source/#torrentfile.torrent--v1-meta-dictionary","text":"announce: The URL of the tracker. info: This maps to a dictionary, with keys described below. name : maps to a UTF-8 encoded string which is the suggested name to save the file (or directory) as. It is purely advisory. piece length : maps to the number of bytes in each piece the file is split into. For the purposes of transfer, files are split into fixed-size pieces which are all the same length except for possibly the last one which may be truncated. piece length : is almost always a power of two, most commonly 2^18 = 256 K pieces : maps to a string whose length is a multiple of 20. It is to be subdivided into strings of length 20, each of which is the SHA1 hash of the piece at the corresponding index. length : In the single file case, maps to the length of the file in bytes. files : If present then the download represents a single file, otherwise it represents a set of files which go in a directory structure. For the purposes of the other keys, the multi-file case is treated as only having a single file by concatenating the files in the order they appear in the files list. The files list is the value files maps to, and is a list of dictionaries containing the following keys: path : A list of UTF-8 encoded strings corresponding to subdirectory names, the last of which is the actual file name length : Maps to the length of the file in bytes. length : Only present if the content is a single file. Maps to the length of the file in bytes. Note In the single file case, the name key is the name of a file, in the muliple file case, it's the name of a directory.","title":"v1 meta-dictionary"},{"location":"source/#torrentfile.torrent.MetaFile","text":"Base Class for all TorrentFile classes. Parameters: Name Type Description Default path str target path to torrent content. Default: None None announce str One or more tracker URL's. Default: None None comment str A comment. Default: None None piece_length int Size of torrent pieces. Default: None None private bool For private trackers. Default: None False outfile str target path to write .torrent file. Default: None None source str Private tracker source. Default: None None progress str level of progress bar displayed Default: \"1\" 1 cwd bool If True change default save location to current directory False httpseeds list one or more web addresses where torrent content can be found. None url_list list one or more web addressess where torrent content exists. None content str alias for 'path' arg. None meta_version int indicates which Bittorrent protocol to use for hashing content None","title":"MetaFile"},{"location":"source/#torrentfile.torrent.MetaFile.__init__","text":"Construct MetaFile superclass and assign local attributes.","title":"__init__()"},{"location":"source/#torrentfile.torrent.MetaFile.assemble","text":"Overload in subclasses. Raises: Type Description Exception NotImplementedError","title":"assemble()"},{"location":"source/#torrentfile.torrent.MetaFile.set_callback","text":"Assign a callback function for the Hashing class to call for each hash. Parameters: Name Type Description Default func function The callback function which accepts a single paramter. required","title":"set_callback()"},{"location":"source/#torrentfile.torrent.MetaFile.sort_meta","text":"Sort the info and meta dictionaries.","title":"sort_meta()"},{"location":"source/#torrentfile.torrent.MetaFile.write","text":"Write meta information to .torrent file. Parameters: Name Type Description Default outfile str Destination path for .torrent file. default=None None Returns: Name Type Description outfile str Where the .torrent file was writen. meta dict .torrent meta information.","title":"write()"},{"location":"source/#torrentfile.torrent.TorrentAssembler","text":"Bases: MetaFile Assembler class for Bittorrent version 2 and hybrid meta files. This differs from the TorrentFileV2 and TorrentFileHybrid, because it can be used as an iterator and works for both versions. Parameters: Name Type Description Default **kwargs dict Keyword arguments for torrent options. {}","title":"TorrentAssembler"},{"location":"source/#torrentfile.torrent.TorrentAssembler.__init__","text":"Create Bittorrent v1 v2 hybrid metafiles.","title":"__init__()"},{"location":"source/#torrentfile.torrent.TorrentAssembler._traverse","text":"Build meta dictionary while walking directory. Parameters: Name Type Description Default path str Path to target file. required","title":"_traverse()"},{"location":"source/#torrentfile.torrent.TorrentAssembler.assemble","text":"Assemble the parts of the torrentfile into meta dictionary.","title":"assemble()"},{"location":"source/#torrentfile.torrent.TorrentFile","text":"Bases: MetaFile , ProgMixin Class for creating Bittorrent meta files. Construct Torrentfile class instance object. Parameters: Name Type Description Default **kwargs dict Dictionary containing torrent file options. {}","title":"TorrentFile"},{"location":"source/#torrentfile.torrent.TorrentFile.__init__","text":"Construct TorrentFile instance with given keyword args. Parameters: Name Type Description Default **kwargs dict dictionary of keyword args passed to superclass. {}","title":"__init__()"},{"location":"source/#torrentfile.torrent.TorrentFile.assemble","text":"Assemble components of torrent metafile. Returns: Type Description dict metadata dictionary for torrent file","title":"assemble()"},{"location":"source/#torrentfile.torrent.TorrentFileHybrid","text":"Bases: MetaFile , ProgMixin Construct the Hybrid torrent meta file with provided parameters. DEPRECATED Parameters: Name Type Description Default **kwargs dict Keyword arguments for torrent options. {}","title":"TorrentFileHybrid"},{"location":"source/#torrentfile.torrent.TorrentFileHybrid.__init__","text":"Create Bittorrent v1 v2 hybrid metafiles.","title":"__init__()"},{"location":"source/#torrentfile.torrent.TorrentFileHybrid._traverse","text":"Build meta dictionary while walking directory. DEPRECATED Parameters: Name Type Description Default path str Path to target file. required","title":"_traverse()"},{"location":"source/#torrentfile.torrent.TorrentFileHybrid.assemble","text":"Assemble the parts of the torrentfile into meta dictionary. DEPRECATED","title":"assemble()"},{"location":"source/#torrentfile.torrent.TorrentFileV2","text":"Bases: MetaFile , ProgMixin Class for creating Bittorrent meta v2 files. DEPRECATED Parameters: Name Type Description Default **kwargs dict Keyword arguments for torrent file options. {}","title":"TorrentFileV2"},{"location":"source/#torrentfile.torrent.TorrentFileV2.__init__","text":"Construct TorrentFileV2 Class instance from given parameters. DEPRECATED Parameters: Name Type Description Default **kwargs dict keywword arguments to pass to superclass. {}","title":"__init__()"},{"location":"source/#torrentfile.torrent.TorrentFileV2._traverse","text":"Walk directory tree. DEPRECATED Parameters: Name Type Description Default path str Path to file or directory. required","title":"_traverse()"},{"location":"source/#torrentfile.torrent.TorrentFileV2.assemble","text":"Assemble then return the meta dictionary for encoding. DEPRECATED Returns: Name Type Description meta dict Metainformation about the torrent. Utility functions and classes used throughout package. Functions: get_piece_length: calculate ideal piece length for torrent file. sortfiles: traverse directory in sorted order yielding paths encountered. path_size: Sum the sizes of each file in path. get_file_list: Return list of all files contained in directory. path_stat: Get ideal piece length, total size, and file list for directory. path_piece_length: Get ideal piece length based on size of directory. Classes: MissingPathError: Custom exception raised when no path was provided to CLI. PieceLengthValueError: Custom exception raised when incorrect input value used for piece length field.","title":"assemble()"},{"location":"source/#torrentfile.utils.Memo","text":"Memoice chache object. Parameters: Name Type Description Default func function The function that is being memoized. required","title":"Memo"},{"location":"source/#torrentfile.utils.Memo.__call__","text":"Invoke each time memo function is called. Parameters: Name Type Description Default path str The relative or absolute path being used as key in cache dict. required Returns: Name Type Description Any The results of calling the function with path.","title":"__call__()"},{"location":"source/#torrentfile.utils.Memo.__init__","text":"Construct for memoization.","title":"__init__()"},{"location":"source/#torrentfile.utils.MissingPathError","text":"Bases: Exception Path parameter is required to specify target content. Creating a .torrent file with no contents seems rather silly. Parameters: Name Type Description Default message str Message for user (optional). None","title":"MissingPathError"},{"location":"source/#torrentfile.utils.MissingPathError.__init__","text":"Raise when creating a meta file without specifying target content. The message argument is a message to pass to Exception base class.","title":"__init__()"},{"location":"source/#torrentfile.utils.PieceLengthValueError","text":"Bases: Exception Piece Length parameter must equal a perfect power of 2. Parameters: Name Type Description Default message str Message for user (optional). None","title":"PieceLengthValueError"},{"location":"source/#torrentfile.utils.PieceLengthValueError.__init__","text":"Raise when creating a meta file with incorrect piece length value. The message argument is a message to pass to Exception base class.","title":"__init__()"},{"location":"source/#torrentfile.utils._filelist_total","text":"Search directory tree for files. Parameters: Name Type Description Default path str Path to file or directory base required Returns: Type Description int Sum of all filesizes in filelist. list All file paths within directory tree.","title":"_filelist_total()"},{"location":"source/#torrentfile.utils.filelist_total","text":"Perform error checking and format conversion to os.PathLike. Parameters: Name Type Description Default pathstring str An existing filesystem path. required Returns: Type Description os . PathLike Input path converted to bytes format. Raises: Type Description MissingPathError File could not be found.","title":"filelist_total()"},{"location":"source/#torrentfile.utils.get_file_list","text":"Return a sorted list of file paths contained in directory. Parameters: Name Type Description Default path str target file or directory. required Returns: Type Description list sorted list of file paths.","title":"get_file_list()"},{"location":"source/#torrentfile.utils.get_piece_length","text":"Calculate the ideal piece length for bittorrent data. Parameters: Name Type Description Default size int Total bits of all files incluided in .torrent file. required Returns: Type Description int Ideal piece length.","title":"get_piece_length()"},{"location":"source/#torrentfile.utils.humanize_bytes","text":"Convert integer into human readable memory sized denomination. Parameters: Name Type Description Default amount int total number of bytes. required Returns: Type Description str human readable representation of the given amount of bytes.","title":"humanize_bytes()"},{"location":"source/#torrentfile.utils.next_power_2","text":"Calculate the next perfect power of 2 equal to or greater than value. Parameters: Name Type Description Default value int integer value that is less than some perfect power of 2. required Returns: Type Description int The next power of 2 greater than value, or value if already power of 2.","title":"next_power_2()"},{"location":"source/#torrentfile.utils.normalize_piece_length","text":"Verify input piece_length is valid and convert accordingly. Parameters: Name Type Description Default piece_length int | str The piece length provided by user. required Returns: Type Description int normalized piece length. Raises: Type Description PieceLengthValueError : If piece length is improper value.","title":"normalize_piece_length()"},{"location":"source/#torrentfile.utils.path_piece_length","text":"Calculate piece length for input path and contents. Parameters: Name Type Description Default path str The absolute path to directory and contents. required Returns: Type Description int The size of pieces of torrent content.","title":"path_piece_length()"},{"location":"source/#torrentfile.utils.path_size","text":"Return the total size of all files in path recursively. Parameters: Name Type Description Default path str path to target file or directory. required Returns: Type Description int total size of files.","title":"path_size()"},{"location":"source/#torrentfile.utils.path_stat","text":"Calculate directory statistics. Parameters: Name Type Description Default path str The path to start calculating from. required Returns: Type Description list List of all files contained in Directory int Total sum of bytes from all contents of dir int The size of pieces of the torrent contents. Holds the release version number.","title":"path_stat()"}]}